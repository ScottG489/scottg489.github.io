{"version":3,"sources":["webpack:///./src/components/ProjectCard.tsx","webpack:///./src/components/Footer.tsx","webpack:///./src/templates/project-tags.tsx"],"names":["ProjectCard","post","large","ghimage","link","title","className","css","PostCardStyles","PostCardLarge","ProjectCardImage","href","target","rel","src","alt","PostCardContent","PostCardHeader","tags","length","map","tag","index","arr","key","to","PostCardContentText","PostCardTitle","PostCardExcerpt","excerpt","lighten","colors","lightgrey","darkmode","blue","midgrey","darkgrey","Footer","outer","SiteFooter","inner","SiteFooterContent","config","Date","getFullYear","footer","SiteFooterNav","github","linkedin","twitter","email","setLightness","Tags","pageContext","data","location","edges","projects","totalCount","tagData","allTagYaml","find","n","node","id","toLowerCase","lang","name","content","description","property","siteUrl","pathname","facebook","split","SiteHeader","SiteArchiveHeader","SiteNavMain","isHome","SiteHeaderBackground","backgroundImage","image","childImageSharp","fluid","SiteMain","PostFeed"],"mappings":"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","file":"component---src-templates-project-tags-tsx-847692ee92c566e58aea.js","sourcesContent":["import { Link } from 'gatsby';\nimport _ from 'lodash';\nimport { lighten } from 'polished';\nimport React from 'react';\n\nimport { css } from '@emotion/core';\nimport styled from '@emotion/styled';\n\nimport { colors } from '../styles/colors';\nimport { ProjectContext } from '../templates/projects';\n\nexport interface ProjectCardProps {\n  post: ProjectContext;\n  large?: boolean;\n}\n\nexport const ProjectCard: React.FC<ProjectCardProps> = ({ post, large = true }) => {\n  const { ghimage, link } = post;\n  const { title } = post;\n\n  return (\n    <article\n      className={`post-card 'no-image' ${\n        large ? 'post-card-large' : ''\n      }`}\n      css={[PostCardStyles, large && PostCardLarge]}\n    >\n      {ghimage && (\n        <ProjectCardImage href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={ghimage} alt={`${title} GitHub repo card`}/>\n        </ProjectCardImage>\n      )}\n      <PostCardContent className=\"post-card-content\">\n        <PostCardHeader className=\"post-card-header\">\n          {\n            post.tags && post.tags.length > 0 && post.tags.map((tag, index, arr) => {\n              return (\n                <Link\n                  key={tag} className=\"post-card-primary-tag\"\n                  to={`/projects/tags/${_.kebabCase(tag)}/`}\n                >\n                  {tag}\n                  {index === arr.length - 1 || ', '}\n                </Link>\n              );\n            })\n          }\n        </PostCardHeader>\n        <PostCardContentText className=\"post-card-content-link\">\n          <PostCardTitle className=\"post-card-title\">{post.title}</PostCardTitle>\n          <PostCardExcerpt className=\"post-card-excerpt\">\n            <p>{post.excerpt || post.excerpt}</p>\n          </PostCardExcerpt>\n        </PostCardContentText>\n      </PostCardContent>\n    </article>\n  );\n};\n\nconst PostCardStyles = css`\n  position: relative;\n  flex: 1 1 301px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  margin: 0 0 20px;\n  /* border-bottom: 1px solid color(var(--lightgrey) l(+12%)); */\n  border-bottom: 1px solid ${lighten('0.12', colors.lightgrey)};\n  background-size: cover;\n\n  @media (prefers-color-scheme: dark) {\n    /* border-bottom-color: color(var(--darkmode) l(+8%)); */\n    border-bottom-color: ${lighten('0.08', colors.darkmode)};\n  }\n`;\n\nconst PostCardLarge = css`\n  @media (min-width: 795px) {\n    flex: 1 1 100%;\n    flex-direction: row;\n    border-top: 0;\n\n    :not(.no-image) .post-card-header {\n      margin-top: 0;\n    }\n\n    .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n      min-height: 380px;\n    }\n\n    .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n\n  .post-card-primary-tag {\n    margin: 0 0 0.2em;\n    /* color: var(--blue); */\n    color: ${colors.blue};\n    font-size: 1.2rem;\n    font-weight: 500;\n    letter-spacing: 0.2px;\n    text-transform: uppercase;\n  }\n`;\n\nconst PostCardContent = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst PostCardContentText = styled.div`\n  .post-card-content-link {\n    padding: 0 0 0 40px;\n  }\n`;\n\nconst PostCardTitle = styled.h2`\n  margin: 0 0 0.4em;\n  line-height: 1.15em;\n  transition: color 0.2s ease-in-out;\n\n  @media (prefers-color-scheme: dark) {\n    color: rgba(255, 255, 255, 0.85);\n  }\n`;\n\nconst PostCardExcerpt = styled.section`\n  font-family: Georgia, serif;\n\n  @media (prefers-color-scheme: dark) {\n    /* color: color(var(--midgrey) l(+10%)); */\n    color: ${lighten('0.1', colors.midgrey)} !important;\n  }\n`;\n\nconst PostCardHeader = styled.header`\n  @media (min-width: 795px) {\n    margin: 15px 40px 0;\n  }\n\n  margin: 15px 0 0;\n`;\n\nconst ProjectCardImage = styled.a`\n  align-self: center;\n`;\n\nexport const StaticAvatar = css`\n  display: block;\n  overflow: hidden;\n  margin: 0 0 0 -6px;\n  width: 34px;\n  height: 34px;\n  border: #fff 2px solid;\n  border-radius: 100%;\n\n  @media (prefers-color-scheme: dark) {\n    /* border-color: color(var(--darkgrey) l(+2%)); */\n    border-color: ${lighten('0.02', colors.darkgrey)};\n  }\n`;\n\nexport const AuthorProfileImage = css`\n  display: block;\n  width: 100%;\n  height: 100%;\n  /* background: color(var(--lightgrey) l(+10%)); */\n  background: ${lighten('0.1', colors.lightgrey)};\n  border-radius: 100%;\n  object-fit: cover;\n\n  @media (prefers-color-scheme: dark) {\n    background: ${colors.darkmode};\n  }\n`;\n","import { Link } from 'gatsby';\nimport { setLightness } from 'polished';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nimport { colors } from '../styles/colors';\nimport { outer, inner } from '../styles/shared';\nimport config from '../website-config';\n\nexport const Footer: React.FC = () => {\n  return (\n    <footer css={[outer, SiteFooter]}>\n      <div css={[inner, SiteFooterContent]}>\n        <section className=\"copyright\">\n          <Link to=\"/\">{config.title}</Link> &copy; {new Date().getFullYear()}{' '}\n          {config.footer && `| ${config.footer}`}\n          <a href=\"https://github.com/scttcper/gatsby-casper/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            gatsby-casper\n          </a>\n        </section>\n        <SiteFooterNav>\n          {config.github && (\n            <a href={config.github} target=\"_blank\" rel=\"noopener noreferrer\">\n              GitHub\n            </a>\n          )}\n          {config.linkedin && (\n            <a href={config.linkedin} target=\"_blank\" rel=\"noopener noreferrer\">\n              LinkedIn\n            </a>\n          )}\n          {config.twitter && (\n            <a href={config.twitter} target=\"_blank\" rel=\"noopener noreferrer\">\n              Twitter\n            </a>\n          )}\n          {config.email && (\n            <a href={config.email} target=\"_blank\" rel=\"noopener noreferrer\">\n              Email\n            </a>\n          )}\n          <a href=\"/rss.xml\">RSS</a>\n        </SiteFooterNav>\n      </div>\n    </footer>\n  );\n};\n\nconst SiteFooter = css`\n  position: relative;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  color: #fff;\n  background: ${setLightness('0.0015', colors.darkgrey)};\n`;\n\nconst SiteFooterContent = css`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n  color: rgba(255, 255, 255, 0.7);\n  font-size: 1.3rem;\n  a {\n    color: rgba(255, 255, 255, 0.7);\n  }\n  a:hover {\n    color: rgba(255, 255, 255, 1);\n    text-decoration: none;\n  }\n  @media (max-width: 650px) {\n    flex-direction: column;\n  }\n`;\n\nconst SiteFooterNav = styled.nav`\n  display: flex;\n\n  a {\n    position: relative;\n    margin-left: 20px;\n  }\n\n  a:before {\n    content: '';\n    position: absolute;\n    top: 11px;\n    left: -11px;\n    display: block;\n    width: 2px;\n    height: 2px;\n    background: #fff;\n    border-radius: 100%;\n  }\n\n  a:first-of-type:before {\n    display: none;\n  }\n  @media (max-width: 650px) {\n    a:first-of-type {\n      margin-left: 0;\n    }\n  }\n`;\n\n","import { graphql } from 'gatsby';\nimport React from 'react';\nimport { FluidObject } from 'gatsby-image';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteNavMain,\n  SiteArchiveHeader,\n  ResponsiveHeaderBackground,\n  SiteHeaderBackground,\n} from '../styles/shared';\nimport { Helmet } from 'react-helmet';\nimport config from '../website-config';\nimport { ProjectCard } from '../components/ProjectCard';\nimport { ProjectContext } from './projects';\n\ninterface TagTemplateProps {\n  location: Location;\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          layout: string;\n          image?: {\n            childImageSharp: {\n              fluid: FluidObject;\n            };\n          };\n        };\n      }>;\n    };\n    projects: {\n      edges: Array<{\n        node: ProjectContext;\n      }>;\n    };\n  };\n}\n\nconst Tags = ({ pageContext, data, location }: TagTemplateProps) => {\n  const tag = pageContext.tag ? pageContext.tag : '';\n  const { edges } = data.projects;\n  const totalCount = edges.length;\n  const tagData = data.allTagYaml.edges.find(\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {tag} - {config.title}\n        </title>\n        <meta name=\"description\" content={tagData?.node ? tagData.node.description : ''} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header\n          className=\"site-archive-header\"\n          css={[SiteHeader, SiteArchiveHeader]}\n        >\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} />\n            </div>\n          </div>\n          <ResponsiveHeaderBackground\n            css={[outer, SiteHeaderBackground]}\n            backgroundImage={tagData?.node?.image?.childImageSharp?.fluid?.src}\n            className=\"site-header-background\"\n          >\n            <SiteHeaderContent css={inner} className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">{tag}</SiteTitle>\n              <SiteDescription className=\"site-description\">\n                {tagData?.node.description ? (\n                  tagData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} projects`}\n                    {totalCount === 1 && '1 project'}\n                    {totalCount === 0 && 'No projects'}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </ResponsiveHeaderBackground>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed]}>\n              {edges.map(({ node }) => (\n                <ProjectCard key={node.title} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n        }\n      }\n    }\n    projects: allProjectsYaml(\n      filter: { tags: { in: [$tag] } }\n     ) {\n      edges {\n        node {\n          title\n          link\n          ghimage\n          excerpt\n          tags\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}