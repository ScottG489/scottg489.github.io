{"version":3,"sources":["webpack:///./src/templates/projects.tsx","webpack:///./src/components/ProjectCard.tsx","webpack:///./src/components/Pagination.tsx"],"names":["pageQuery","HomePosts","ProjectsPage","props","width","height","data","header","childImageSharp","fixed","projects","edges","css","lang","config","title","name","content","description","property","siteUrl","src","facebook","googleSiteVerification","twitter","split","toString","outer","SiteHeader","className","style","backgroundImage","inner","id","SiteMain","Posts","PostFeed","map","project","key","node","post","children","pageContext","numPages","currentPage","ProjectCard","large","ghimage","link","PostCardStyles","PostCardLarge","ProjectCardImage","href","target","rel","alt","PostCardContent","PostCardHeader","tags","length","tag","index","arr","to","_","kebabCase","PostCardContentText","PostCardTitle","PostCardExcerpt","excerpt","lighten","colors","lightgrey","darkmode","blue","midgrey","darkgrey","navCss","darken","Pagination","isFirst","isLast","prevPage","nextPage","String","fromCharCode","Array","from","i"],"mappings":"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","file":"component---src-templates-projects-tsx-6996b1bcea6e2b9bee58.js","sourcesContent":["import { graphql } from 'gatsby';\nimport { FixedObject } from 'gatsby-image';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { css } from '@emotion/core';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport Pagination from '../components/Pagination';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  Posts,\n  SiteHeader,\n  SiteMain,\n} from '../styles/shared';\nimport config from '../website-config';\nimport { HomeFullHeader, HomeFullTitle, PageContext } from './post';\nimport { ProjectCard } from '../components/ProjectCard';\n\nexport interface ProjectsProps {\n  pageContext: {\n    currentPage: number;\n    numPages: number;\n  };\n  data: {\n    logo: {\n      childImageSharp: {\n        fixed: FixedObject;\n      };\n    };\n    header: {\n      childImageSharp: {\n        fixed: FixedObject;\n      };\n    };\n    posts: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n    projects: {\n      edges: Array<{\n        node: ProjectContext;\n      }>;\n    };\n  };\n}\n\nexport interface ProjectContext {\n  title: string;\n  post: string;\n  large: boolean;\n  link: string;\n  ghimage: string;\n  excerpt: string;\n  tags: string[];\n}\n\nconst ProjectsPage: React.FC<ProjectsProps> = props => {\n  const { width, height } = props.data.header.childImageSharp.fixed;\n  const projects = props.data.projects.edges;\n\n  return (\n    <IndexLayout css={HomePosts}>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta\n          property=\"og:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\n        />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        {config.googleSiteVerification && (\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta\n          name=\"twitter:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\n        />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width.toString()} />\n        <meta property=\"og:image:height\" content={height.toString()} />\n      </Helmet>\n      <Wrapper>\n        <div\n          css={[outer, SiteHeader]}\n          className=\"site-header-background\"\n          style={{\n            backgroundImage: `url('${props.data.header.childImageSharp.fixed.src}')`,\n          }}\n        >\n          <div css={inner}>\n            <SiteNav />\n          </div>\n        </div>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={[inner, Posts]}>\n            <HomeFullHeader className=\"post-full-header\">\n              <HomeFullTitle className=\"post-full-title\">Projects</HomeFullTitle>\n            </HomeFullHeader>\n            <div css={[PostFeed]}>\n              {projects.map(project => {\n                return (<ProjectCard key={project.node.title} post={project.node} />);\n              })}\n            </div>\n          </div>\n        </main>\n        {props.children}\n        {props.pageContext.numPages > 1 && (\n          <Pagination\n            currentPage={props.pageContext.currentPage}\n            numPages={props.pageContext.numPages}\n          />\n        )}\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query projectsPageQuery {\n    logo: file(relativePath: { eq: \"img/scott-logo.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    header: file(relativePath: { eq: \"posts/img/blog-cover.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 2000, quality: 100) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    projects: allProjectsYaml {\n      edges {\n        node {\n          title\n          link\n          ghimage\n          excerpt\n          tags\n        }\n      }\n    }\n  }\n`;\n\nconst HomePosts = css`\n  @media (min-width: 795px) {\n    .post-card-large {\n      flex: 1 1 100%;\n      flex-direction: row;\n      border-top: 0;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large:not(.no-image) .post-card-header {\n      margin: 15px 40px 0;\n    }\n\n    .post-card-large .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n    }\n\n    .post-card-large .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-large .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n`;\n\nexport default ProjectsPage;\n","import { Link } from 'gatsby';\nimport _ from 'lodash';\nimport { lighten } from 'polished';\nimport React from 'react';\n\nimport { css } from '@emotion/core';\nimport styled from '@emotion/styled';\n\nimport { colors } from '../styles/colors';\nimport { ProjectContext } from '../templates/projects';\n\nexport interface ProjectCardProps {\n  post: ProjectContext;\n  large?: boolean;\n}\n\nexport const ProjectCard: React.FC<ProjectCardProps> = ({ post, large = true }) => {\n  const { ghimage, link } = post;\n  const { title } = post;\n\n  return (\n    <article\n      className={`post-card 'no-image' ${\n        large ? 'post-card-large' : ''\n      }`}\n      css={[PostCardStyles, large && PostCardLarge]}\n    >\n      {ghimage && (\n        <ProjectCardImage href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={ghimage} alt={`${title} GitHub repo card`}/>\n        </ProjectCardImage>\n      )}\n      <PostCardContent className=\"post-card-content\">\n        <PostCardHeader className=\"post-card-header\">\n          {\n            post.tags && post.tags.length > 0 && post.tags.map((tag, index, arr) => {\n              return (\n                <Link\n                  key={tag} className=\"post-card-primary-tag\"\n                  to={`/projects/tags/${_.kebabCase(tag)}/`}\n                >\n                  {tag}\n                  {index === arr.length - 1 || ', '}\n                </Link>\n              );\n            })\n          }\n        </PostCardHeader>\n        <PostCardContentText className=\"post-card-content-link\">\n          <PostCardTitle className=\"post-card-title\">{post.title}</PostCardTitle>\n          <PostCardExcerpt className=\"post-card-excerpt\">\n            <p>{post.excerpt || post.excerpt}</p>\n          </PostCardExcerpt>\n        </PostCardContentText>\n      </PostCardContent>\n    </article>\n  );\n};\n\nconst PostCardStyles = css`\n  position: relative;\n  flex: 1 1 301px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  margin: 0 0 20px;\n  /* border-bottom: 1px solid color(var(--lightgrey) l(+12%)); */\n  border-bottom: 1px solid ${lighten('0.12', colors.lightgrey)};\n  background-size: cover;\n\n  @media (prefers-color-scheme: dark) {\n    /* border-bottom-color: color(var(--darkmode) l(+8%)); */\n    border-bottom-color: ${lighten('0.08', colors.darkmode)};\n  }\n`;\n\nconst PostCardLarge = css`\n  @media (min-width: 795px) {\n    flex: 1 1 100%;\n    flex-direction: row;\n    border-top: 0;\n\n    :not(.no-image) .post-card-header {\n      margin-top: 0;\n    }\n\n    .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n      min-height: 380px;\n    }\n\n    .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n\n  .post-card-primary-tag {\n    margin: 0 0 0.2em;\n    /* color: var(--blue); */\n    color: ${colors.blue};\n    font-size: 1.2rem;\n    font-weight: 500;\n    letter-spacing: 0.2px;\n    text-transform: uppercase;\n  }\n`;\n\nconst PostCardContent = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst PostCardContentText = styled.div`\n  .post-card-content-link {\n    padding: 0 0 0 40px;\n  }\n`;\n\nconst PostCardTitle = styled.h2`\n  margin: 0 0 0.4em;\n  line-height: 1.15em;\n  transition: color 0.2s ease-in-out;\n\n  @media (prefers-color-scheme: dark) {\n    color: rgba(255, 255, 255, 0.85);\n  }\n`;\n\nconst PostCardExcerpt = styled.section`\n  font-family: Georgia, serif;\n\n  @media (prefers-color-scheme: dark) {\n    /* color: color(var(--midgrey) l(+10%)); */\n    color: ${lighten('0.1', colors.midgrey)} !important;\n  }\n`;\n\nconst PostCardHeader = styled.header`\n  @media (min-width: 795px) {\n    margin: 15px 40px 0;\n  }\n\n  margin: 15px 0 0;\n`;\n\nconst ProjectCardImage = styled.a`\n  align-self: center;\n`;\n\nexport const StaticAvatar = css`\n  display: block;\n  overflow: hidden;\n  margin: 0 0 0 -6px;\n  width: 34px;\n  height: 34px;\n  border: #fff 2px solid;\n  border-radius: 100%;\n\n  @media (prefers-color-scheme: dark) {\n    /* border-color: color(var(--darkgrey) l(+2%)); */\n    border-color: ${lighten('0.02', colors.darkgrey)};\n  }\n`;\n\nexport const AuthorProfileImage = css`\n  display: block;\n  width: 100%;\n  height: 100%;\n  /* background: color(var(--lightgrey) l(+10%)); */\n  background: ${lighten('0.1', colors.lightgrey)};\n  border-radius: 100%;\n  object-fit: cover;\n\n  @media (prefers-color-scheme: dark) {\n    background: ${colors.darkmode};\n  }\n`;\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport { darken } from 'polished';\nimport { css } from '@emotion/core';\n\nimport { colors } from '../styles/colors';\n\nexport interface PaginationProps {\n  currentPage: number;\n  numPages: number;\n}\n\nconst Pagination: React.FunctionComponent<PaginationProps> = ({ currentPage, numPages }) => {\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\n  const nextPage = (currentPage + 1).toString();\n\n  return (\n    <nav css={navCss}>\n      <div>\n        {!isFirst && (\n          <Link to={prevPage} rel=\"prev\">\n            {/* << symbol */}\n            {String.fromCharCode(171)}\n          </Link>\n        )}\n\n        {Array.from({ length: numPages }, (_, i) => (\n          <Link key={`pagination-number${i + 1}`} className={i + 1 === currentPage ? 'active' : ''} to={`/${i === 0 ? '' : i + 1}`}>\n            {i + 1}\n          </Link>\n        ))}\n\n        {!isLast && (\n          <Link to={nextPage} rel=\"next\">\n            {/* >> symbol */}\n            {String.fromCharCode(187)}\n          </Link>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nconst navCss = css`\n  text-align: center;\n  div {\n    display: inline-block;\n  }\n\n  a {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\n    background: #fff;\n    color: black;\n    float: left;\n    padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color .3s;\n    border: 2px solid #ddd;\n    margin: 0 4px;\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\n    border-radius: 6px;\n    margin-bottom: 5px;\n    min-width: 50px;\n\n    &.active {\n      -webkit-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      -moz-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n    }\n\n    &:hover:not(.active) {\n      background-color: #ddd;\n    }\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`;\n\nexport default Pagination;\n"],"sourceRoot":""}