{"version":3,"sources":["webpack:///./src/components/ProjectCard.tsx","webpack:///./src/components/Pagination.tsx","webpack:///./src/templates/index.tsx"],"names":["ProjectCard","post","large","ghimage","link","title","className","css","PostCardStyles","PostCardLarge","ProjectCardImage","href","target","rel","src","alt","PostCardContent","PostCardHeader","tags","length","map","tag","index","arr","key","to","_","kebabCase","PostCardContentText","PostCardTitle","PostCardExcerpt","excerpt","lighten","colors","lightgrey","darkmode","blue","midgrey","darkgrey","navCss","darken","Pagination","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","String","fromCharCode","Array","from","i","pageQuery","HomePosts","HomeContentHeader","HomeContentHeaderLink","IndexPage","props","width","height","data","header","childImageSharp","fixed","posts","edges","projects","console","log","JSON","stringify","lang","config","name","content","description","property","siteUrl","facebook","googleSiteVerification","twitter","split","outer","SiteHeader","SiteHeaderStyles","style","backgroundImage","inner","logo","maxHeight","id","SiteMain","Posts","PostFeed","node","frontmatter","draft","fields","slug","project","process","children","pageContext"],"mappings":"0OAgBO,MAAMA,EAA0C,EAAGC,OAAMC,SAAQ,MACtE,MAAM,QAAEC,EAAF,KAAWC,GAASH,GACpB,MAAEI,GAAUJ,EAElB,OACE,uBACEK,UAAY,yBACVJ,EAAQ,kBAAoB,IAE9BK,IAAG,YAAE,CAACC,EAAgBN,GAASO,KAE9BN,GACC,YAACO,EAAD,CAAkBC,KAAMP,EAAMQ,OAAO,SAASC,IAAI,uBAChD,mBAAKC,IAAKX,EAASY,IAAQV,EAAF,uBAG7B,YAACW,EAAD,CAAiBV,UAAU,qBACzB,YAACW,EAAD,CAAgBX,UAAU,oBAEtBL,EAAKiB,MAAQjB,EAAKiB,KAAKC,OAAS,GAAKlB,EAAKiB,KAAKE,IAAI,CAACC,EAAKC,EAAOC,IAE5D,YAAC,IAAD,CACEC,IAAKH,EAAKf,UAAU,wBACpBmB,GAAK,kBAAiBC,IAAEC,UAAUN,OAEjCA,EACAC,IAAUC,EAAIJ,OAAS,GAAK,QAMvC,YAACS,EAAD,CAAqBtB,UAAU,0BAC7B,YAACuB,EAAD,CAAevB,UAAU,mBAAmBL,EAAKI,OACjD,YAACyB,EAAD,CAAiBxB,UAAU,qBACzB,qBAAIL,EAAK8B,SAAW9B,EAAK8B,cAQ/BvB,EAAiBD,YAAH,+HAQSyB,YAAQ,OAAQC,IAAOC,WARhC,iFAaOF,YAAQ,OAAQC,IAAOE,UAb9B,MAiBd1B,EAAgBF,YAAH,mkBAmDN0B,IAAOG,KAnDD,qFA2DbpB,EAAkB,mBAAH,oBAAG,CAAH,0EAMfY,EAAsB,mBAAH,oBAAG,CAAH,wEAMnBC,EAAgB,kBAAH,oBAAG,CAAH,kKAUbC,EAAkB,uBAAH,oBAAG,CAAH,sEAKRE,YAAQ,MAAOC,IAAOI,SALd,iBASfpB,EAAiB,sBAAH,oBAAG,CAAH,yFAQdP,EAAmB,iBAAH,oBAAG,CAAH,6CAeFsB,YAAQ,OAAQC,IAAOK,UAS3BN,YAAQ,MAAOC,IAAOC,WAKpBD,IAAOE,U,kCC3MzB,gEAYA,MAiCMI,EAAShC,YAAH,0cAsBqCiC,YAAO,IAAMP,IAAOK,UAtBzD,0CAuBkCE,YAAO,IAAMP,IAAOK,UAvBtD,qCAwB6BE,YAAO,IAAMP,IAAOK,UAxBjD,iFAqCGG,IAtE8C,EAAGC,cAAaC,eAC3E,MAAMC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAGK,WAC3DC,GAAYN,EAAc,GAAGK,WAEnC,OACE,mBAAKxC,IAAKgC,GACR,wBACIK,GACA,YAAC,IAAD,CAAMnB,GAAIqB,EAAUjC,IAAI,QAErBoC,OAAOC,aAAa,MAIxBC,MAAMC,KAAK,CAAEjC,OAAQwB,GAAY,CAACjB,EAAG2B,IACpC,YAAC,IAAD,CAAM7B,IAAM,qBAAmB6B,EAAI,GAAK/C,UAAW+C,EAAI,IAAMX,EAAc,SAAW,GAAIjB,GAAK,KAAS,IAAN4B,EAAU,GAAKA,EAAI,IAClHA,EAAI,KAIPR,GACA,YAAC,IAAD,CAAMpB,GAAIuB,EAAUnC,IAAI,QAErBoC,OAAOC,aAAa,U,uUCuBjC,MAuHaI,EAAY,aAiEnBC,EAAY,CAAH,2vBAuDFC,EAAoB,sBAAH,mBAAG,CAAH,iRAoBxBC,EAAwB,CAAH,gFAUZC,UA7QyBC,IACtC,MAAM,MAAEC,EAAF,OAASC,GAAWF,EAAMG,KAAKC,OAAOC,gBAAgBC,MACtDC,EAAQP,EAAMG,KAAKI,MAAMC,MACzBC,EAAWT,EAAMG,KAAKM,SAASD,MAGrC,OAFAE,QAAQC,IAAIC,KAAKC,UAAUJ,EAAU,KAAM,IAGzC,YAAC,IAAD,CAAa7D,IAAKgD,GAChB,YAAC,IAAD,KACE,oBAAMkB,KAAMC,IAAOD,OACnB,yBAAQC,IAAOrE,OACf,oBAAMsE,KAAK,cAAcC,QAASF,IAAOG,cACzC,oBAAMC,SAAS,eAAeF,QAASF,IAAOrE,QAC9C,oBAAMyE,SAAS,UAAUF,QAAQ,YACjC,oBAAME,SAAS,WAAWF,QAASF,IAAOrE,QAC1C,oBAAMyE,SAAS,iBAAiBF,QAASF,IAAOG,cAChD,oBAAMC,SAAS,SAASF,QAASF,IAAOK,UACxC,oBACED,SAAS,WACTF,QAAU,GAAEF,IAAOK,UAAUpB,EAAMG,KAAKC,OAAOC,gBAAgBC,MAAMnD,QAEtE4D,IAAOM,UAAY,oBAAMF,SAAS,oBAAoBF,QAASF,IAAOM,WACtEN,IAAOO,wBACN,oBAAMN,KAAK,2BAA2BC,QAASF,IAAOO,yBAExD,oBAAMN,KAAK,eAAeC,QAAQ,wBAClC,oBAAMD,KAAK,gBAAgBC,QAASF,IAAOrE,QAC3C,oBAAMsE,KAAK,sBAAsBC,QAASF,IAAOG,cACjD,oBAAMF,KAAK,cAAcC,QAASF,IAAOK,UACzC,oBACEJ,KAAK,gBACLC,QAAU,GAAEF,IAAOK,UAAUpB,EAAMG,KAAKC,OAAOC,gBAAgBC,MAAMnD,QAEtE4D,IAAOQ,SACN,oBACEP,KAAK,eACLC,QAAU,IAAGF,IAAOQ,QAAQC,MAAM,wBAAwB,KAG9D,oBAAML,SAAS,iBAAiBF,QAAShB,EAAMb,aAC/C,oBAAM+B,SAAS,kBAAkBF,QAASf,EAAOd,cAEnD,YAAC,IAAD,KACE,mBACExC,IAAG,YAAE,CAAC6E,IAAOC,IAAYC,MACzBhF,UAAU,yBACViF,MAAO,CACLC,gBAAkB,QAAO7B,EAAMG,KAAKC,OAAOC,gBAAgBC,MAAMnD,UAGnE,mBAAKP,IAAKkF,KACR,YAAC,IAAD,MACA,YAAC,IAAD,CAAmBnF,UAAU,sBAC3B,YAAC,IAAD,CAAWA,UAAU,cAClBqD,EAAMG,KAAK4B,KACV,mBACEH,MAAO,CAAEI,UAAW,SACpB7E,IAAK6C,EAAMG,KAAK4B,KAAK1B,gBAAgBC,MAAMnD,IAC3CC,IAAK2D,IAAOrE,QAGdqE,IAAOrE,OAGX,YAAC,IAAD,KAAkBqE,IAAOG,gBAI/B,oBAAMe,GAAG,YAAYrF,IAAG,YAAE,CAACsF,IAAUT,OACnC,mBAAK7E,IAAG,YAAE,CAACkF,IAAOK,OAChB,YAACtC,EAAD,CAAmBlD,UAAU,oBAC3B,YAAC,IAAD,CAAMmB,GAAG,SAASlB,IAAKkD,GACrB,YAAC,gBAAD,CAAenD,UAAU,mBAAzB,WAKJ,mBAAKC,IAAG,YAAE,CAACwF,OACR7B,EAAM9C,IAAI,CAACnB,EAAMqB,KAGmB,IAAhCrB,EAAK+F,KAAKC,YAAYC,OAErB,YAAC,IAAD,CAAU1E,IAAKvB,EAAK+F,KAAKG,OAAOC,KAAMnG,KAAMA,EAAK+F,KAAM9F,MAAiB,IAAVoB,MAKtE,YAACkC,EAAD,CAAmBlD,UAAU,oBAC3B,YAAC,IAAD,CAAMmB,GAAG,YAAYlB,IAAKkD,GACxB,YAAC,gBAAD,CAAenD,UAAU,mBAAzB,cAKJ,mBAAKC,IAAG,YAAE,CAACwF,OACR3B,EAAShD,IAAIiF,IAETC,MAQV3C,EAAM4C,SACN5C,EAAM6C,YAAY7D,SAAW,GAC5B,YAAC,IAAD,CACED,YAAaiB,EAAM6C,YAAY9D,YAC/BC,SAAUgB,EAAM6C,YAAY7D,WAGhC,YAAC,IAAD","file":"component---src-templates-index-tsx-f0e5c6a33843494ee0ae.js","sourcesContent":["import { Link } from 'gatsby';\nimport _ from 'lodash';\nimport { lighten } from 'polished';\nimport React from 'react';\n\nimport { css } from '@emotion/core';\nimport styled from '@emotion/styled';\n\nimport { colors } from '../styles/colors';\nimport { ProjectContext } from '../templates/projects';\n\nexport interface ProjectCardProps {\n  post: ProjectContext;\n  large?: boolean;\n}\n\nexport const ProjectCard: React.FC<ProjectCardProps> = ({ post, large = true }) => {\n  const { ghimage, link } = post;\n  const { title } = post;\n\n  return (\n    <article\n      className={`post-card 'no-image' ${\n        large ? 'post-card-large' : ''\n      }`}\n      css={[PostCardStyles, large && PostCardLarge]}\n    >\n      {ghimage && (\n        <ProjectCardImage href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={ghimage} alt={`${title} GitHub repo card`}/>\n        </ProjectCardImage>\n      )}\n      <PostCardContent className=\"post-card-content\">\n        <PostCardHeader className=\"post-card-header\">\n          {\n            post.tags && post.tags.length > 0 && post.tags.map((tag, index, arr) => {\n              return (\n                <Link\n                  key={tag} className=\"post-card-primary-tag\"\n                  to={`/projects/tags/${_.kebabCase(tag)}/`}\n                >\n                  {tag}\n                  {index === arr.length - 1 || ', '}\n                </Link>\n              );\n            })\n          }\n        </PostCardHeader>\n        <PostCardContentText className=\"post-card-content-link\">\n          <PostCardTitle className=\"post-card-title\">{post.title}</PostCardTitle>\n          <PostCardExcerpt className=\"post-card-excerpt\">\n            <p>{post.excerpt || post.excerpt}</p>\n          </PostCardExcerpt>\n        </PostCardContentText>\n      </PostCardContent>\n    </article>\n  );\n};\n\nconst PostCardStyles = css`\n  position: relative;\n  flex: 1 1 301px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  margin: 0 0 20px;\n  /* border-bottom: 1px solid color(var(--lightgrey) l(+12%)); */\n  border-bottom: 1px solid ${lighten('0.12', colors.lightgrey)};\n  background-size: cover;\n\n  @media (prefers-color-scheme: dark) {\n    /* border-bottom-color: color(var(--darkmode) l(+8%)); */\n    border-bottom-color: ${lighten('0.08', colors.darkmode)};\n  }\n`;\n\nconst PostCardLarge = css`\n  @media (min-width: 795px) {\n    flex: 1 1 100%;\n    flex-direction: row;\n    border-top: 0;\n\n    :not(.no-image) .post-card-header {\n      margin-top: 0;\n    }\n\n    .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n      min-height: 380px;\n    }\n\n    .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n\n  .post-card-primary-tag {\n    margin: 0 0 0.2em;\n    /* color: var(--blue); */\n    color: ${colors.blue};\n    font-size: 1.2rem;\n    font-weight: 500;\n    letter-spacing: 0.2px;\n    text-transform: uppercase;\n  }\n`;\n\nconst PostCardContent = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst PostCardContentText = styled.div`\n  .post-card-content-link {\n    padding: 0 0 0 40px;\n  }\n`;\n\nconst PostCardTitle = styled.h2`\n  margin: 0 0 0.4em;\n  line-height: 1.15em;\n  transition: color 0.2s ease-in-out;\n\n  @media (prefers-color-scheme: dark) {\n    color: rgba(255, 255, 255, 0.85);\n  }\n`;\n\nconst PostCardExcerpt = styled.section`\n  font-family: Georgia, serif;\n\n  @media (prefers-color-scheme: dark) {\n    /* color: color(var(--midgrey) l(+10%)); */\n    color: ${lighten('0.1', colors.midgrey)} !important;\n  }\n`;\n\nconst PostCardHeader = styled.header`\n  @media (min-width: 795px) {\n    margin: 15px 40px 0;\n  }\n\n  margin: 15px 0 0;\n`;\n\nconst ProjectCardImage = styled.a`\n  align-self: center;\n`;\n\nexport const StaticAvatar = css`\n  display: block;\n  overflow: hidden;\n  margin: 0 0 0 -6px;\n  width: 34px;\n  height: 34px;\n  border: #fff 2px solid;\n  border-radius: 100%;\n\n  @media (prefers-color-scheme: dark) {\n    /* border-color: color(var(--darkgrey) l(+2%)); */\n    border-color: ${lighten('0.02', colors.darkgrey)};\n  }\n`;\n\nexport const AuthorProfileImage = css`\n  display: block;\n  width: 100%;\n  height: 100%;\n  /* background: color(var(--lightgrey) l(+10%)); */\n  background: ${lighten('0.1', colors.lightgrey)};\n  border-radius: 100%;\n  object-fit: cover;\n\n  @media (prefers-color-scheme: dark) {\n    background: ${colors.darkmode};\n  }\n`;\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport { darken } from 'polished';\nimport { css } from '@emotion/core';\n\nimport { colors } from '../styles/colors';\n\nexport interface PaginationProps {\n  currentPage: number;\n  numPages: number;\n}\n\nconst Pagination: React.FunctionComponent<PaginationProps> = ({ currentPage, numPages }) => {\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\n  const nextPage = (currentPage + 1).toString();\n\n  return (\n    <nav css={navCss}>\n      <div>\n        {!isFirst && (\n          <Link to={prevPage} rel=\"prev\">\n            {/* << symbol */}\n            {String.fromCharCode(171)}\n          </Link>\n        )}\n\n        {Array.from({ length: numPages }, (_, i) => (\n          <Link key={`pagination-number${i + 1}`} className={i + 1 === currentPage ? 'active' : ''} to={`/${i === 0 ? '' : i + 1}`}>\n            {i + 1}\n          </Link>\n        ))}\n\n        {!isLast && (\n          <Link to={nextPage} rel=\"next\">\n            {/* >> symbol */}\n            {String.fromCharCode(187)}\n          </Link>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nconst navCss = css`\n  text-align: center;\n  div {\n    display: inline-block;\n  }\n\n  a {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\n    background: #fff;\n    color: black;\n    float: left;\n    padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color .3s;\n    border: 2px solid #ddd;\n    margin: 0 4px;\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\n    border-radius: 6px;\n    margin-bottom: 5px;\n    min-width: 50px;\n\n    &.active {\n      -webkit-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      -moz-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n    }\n\n    &:hover:not(.active) {\n      background-color: #ddd;\n    }\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`;\n\nexport default Pagination;\n","import { graphql, Link } from 'gatsby';\nimport { FixedObject } from 'gatsby-image';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { css } from '@emotion/core';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport Pagination from '../components/Pagination';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  Posts,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteHeaderStyles,\n} from '../styles/shared';\nimport config from '../website-config';\nimport { HomeFullTitle, PageContext } from './post';\nimport { ProjectCard } from '../components/ProjectCard';\nimport styled from '@emotion/styled';\nimport { ProjectContext } from './projects';\n\nexport interface IndexProps {\n  pageContext: {\n    currentPage: number;\n    numPages: number;\n  };\n  data: {\n    logo: {\n      childImageSharp: {\n        fixed: FixedObject;\n      };\n    };\n    header: {\n      childImageSharp: {\n        fixed: FixedObject;\n      };\n    };\n    posts: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n    projects: {\n      edges: Array<{\n        node: ProjectContext;\n      }>;\n    };\n  };\n}\n\nconst IndexPage: React.FC<IndexProps> = props => {\n  const { width, height } = props.data.header.childImageSharp.fixed;\n  const posts = props.data.posts.edges;\n  const projects = props.data.projects.edges;\n  console.log(JSON.stringify(projects, null, 2));\n\n  return (\n    <IndexLayout css={HomePosts}>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta\n          property=\"og:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\n        />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        {config.googleSiteVerification && (\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta\n          name=\"twitter:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\n        />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width.toString()} />\n        <meta property=\"og:image:height\" content={height.toString()} />\n      </Helmet>\n      <Wrapper>\n        <div\n          css={[outer, SiteHeader, SiteHeaderStyles]}\n          className=\"site-header-background\"\n          style={{\n            backgroundImage: `url('${props.data.header.childImageSharp.fixed.src}')`,\n          }}\n        >\n          <div css={inner}>\n            <SiteNav />\n            <SiteHeaderContent className=\"site-header-conent\">\n              <SiteTitle className=\"site-title\">\n                {props.data.logo ? (\n                  <img\n                    style={{ maxHeight: '200px' }}\n                    src={props.data.logo.childImageSharp.fixed.src}\n                    alt={config.title}\n                  />\n                ) : (\n                  config.title\n                )}\n              </SiteTitle>\n              <SiteDescription>{config.description}</SiteDescription>\n            </SiteHeaderContent>\n          </div>\n        </div>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={[inner, Posts]}>\n            <HomeContentHeader className=\"post-full-header\">\n              <Link to=\"/posts\" css={HomeContentHeaderLink}>\n                <HomeFullTitle className=\"post-full-title\">\n                  Posts\n                </HomeFullTitle>\n              </Link>\n            </HomeContentHeader>\n            <div css={[PostFeed]}>\n              {posts.map((post, index) => {\n                // filter out drafts in production\n                return (\n                  (post.node.frontmatter.draft !== true ||\n                    process.env.NODE_ENV !== 'production') && (\n                    <PostCard key={post.node.fields.slug} post={post.node} large={index === 0} />\n                  )\n                );\n              })}\n            </div>\n            <HomeContentHeader className=\"post-full-header\">\n              <Link to=\"/projects\" css={HomeContentHeaderLink}>\n                <HomeFullTitle className=\"post-full-title\">\n                  Projects\n                </HomeFullTitle>\n              </Link>\n            </HomeContentHeader>\n            <div css={[PostFeed]}>\n              {projects.map(project => {\n                return (\n                  (process.env.NODE_ENV !== 'production') && (\n                    <ProjectCard key={project.node.title} post={project.node} />\n                  )\n                );\n              })}\n            </div>\n          </div>\n        </main>\n        {props.children}\n        {props.pageContext.numPages > 1 && (\n          <Pagination\n            currentPage={props.pageContext.currentPage}\n            numPages={props.pageContext.numPages}\n          />\n        )}\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    logo: file(relativePath: { eq: \"img/scott-logo.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    header: file(relativePath: { eq: \"posts/img/blog-cover.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 2000, quality: 100) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    posts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true } }, fileAbsolutePath: {regex: \"/content/posts/\"} }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            date\n            tags\n            draft\n            excerpt\n            image {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n    projects: allProjectsYaml {\n      edges {\n        node {\n          title\n          link\n          ghimage\n          excerpt\n          tags\n        }\n      }\n    }\n  }\n`;\n\nconst HomePosts = css`\n  @media (min-width: 795px) {\n    .post-card-large {\n      flex: 1 1 100%;\n      flex-direction: row;\n      border-top: 0;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large:not(.no-image) .post-card-header {\n      margin: 15px 40px 0;\n    }\n\n    .post-card-large .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n    }\n\n    .post-card-large .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-large .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n`;\n\nexport const HomeContentHeader = styled.header`\n  a:hover {\n    text-decoration: none;\n  }\n  position: relative;\n  margin: 0 auto;\n  padding: 50px 0px 0px;\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n\n  @media (max-width: 800px) {\n    padding-right: 5vw;\n    padding-left: 5vw;\n  }\n\n  @media (max-width: 500px) {\n    padding: 20px 0 35px;\n  }\n`;\n\nconst HomeContentHeaderLink = css`\n  a:hover {\n    text-decoration: none;\n  }\n\n  h1:hover {\n    color: #26a6ed;\n  }\n`;\n\nexport default IndexPage;\n"],"sourceRoot":""}