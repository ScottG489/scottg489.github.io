{"version":3,"sources":["webpack:///./src/templates/post.tsx","webpack:///./src/components/Pagination.tsx","webpack:///./src/components/ProjectCard.tsx","webpack:///./src/templates/index.tsx"],"names":["PostTemplate","css","colors","darkmode","PostFull","NoImage","PostFullHeader","HomeFullHeader","HomeFullTitle","lighten","lightgrey","setLightness","darkgrey","PostFullTags","midgrey","PostFullCustomExcerpt","PostFullByline","PostFullTitle","PostFullImage","query","PageTemplate","data","pageContext","location","post","markdownRemark","console","log","relatedPosts","edges","node","width","height","frontmatter","image","childImageSharp","fluid","sizes","split","String","Number","aspectRatio","date","Date","datetime","format","displayDatetime","className","lang","config","title","name","content","excerpt","property","siteUrl","pathname","src","tags","facebook","twitter","outer","SiteNavMain","inner","isPost","id","SiteMain","length","map","tag","index","arr","key","to","_","dateTime","timeToRead","style","alt","htmlAst","showSubscribe","currentPageSlug","navCss","darken","Pagination","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","rel","fromCharCode","Array","from","i","ProjectCard","large","ghimage","PostCardStyles","PostCardLarge","ProjectCardImage","href","target","PostCardContent","PostCardHeader","kebabCase","PostCardContentText","PostCardTitle","PostCardExcerpt","blue","pageQuery","HomePosts","IndexPage","props","header","fixed","posts","allMarkdownRemark","filter","fields","layout","projects","Helmet","description","googleSiteVerification","Wrapper","SiteHeader","SiteHeaderStyles","backgroundImage","SiteNav","isHome","logo","maxHeight","Posts","PostFeed","draft","PostCard","slug","project","children","Footer"],"mappings":"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","file":"component---src-templates-index-tsx-3d76c4eb40b2acd23b8f.js","sourcesContent":["import { format } from 'date-fns';\nimport { graphql, Link } from 'gatsby';\nimport Img, { FluidObject } from 'gatsby-image';\nimport * as _ from 'lodash';\nimport { lighten, setLightness } from 'polished';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { css } from '@emotion/core';\nimport styled from '@emotion/styled';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav, { SiteNavMain } from '../components/header/SiteNav';\nimport PostContent from '../components/PostContent';\nimport { ReadNext } from '../components/ReadNext';\nimport { Subscribe } from '../components/subscribe/Subscribe';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport { colors } from '../styles/colors';\nimport { inner, outer, SiteMain } from '../styles/shared';\nimport config from '../website-config';\n\ninterface PageTemplateProps {\n  location: Location;\n  data: {\n    logo: {\n      childImageSharp: {\n        fixed: any;\n      };\n    };\n    markdownRemark: {\n      html: string;\n      htmlAst: any;\n      excerpt: string;\n      timeToRead: string;\n      frontmatter: {\n        title: string;\n        date: string;\n        userDate: string;\n        image: {\n          childImageSharp: {\n            fluid: any;\n          };\n        };\n        excerpt: string;\n        tags: string[];\n      };\n    };\n    relatedPosts: {\n      totalCount: number;\n      edges: Array<{\n        node: {\n          timeToRead: number;\n          frontmatter: {\n            title: string;\n            date: string;\n            exerpt: string;\n            layout: string;\n          };\n          fields: {\n            slug: string;\n          };\n        };\n      }>;\n    };\n  };\n  pageContext: {\n    prev: PageContext;\n    next: PageContext;\n  };\n}\n\nexport interface PageContext {\n  excerpt: string;\n  timeToRead: number;\n  fields: {\n    slug: string;\n  };\n  frontmatter: {\n    image: {\n      childImageSharp: {\n        fluid: FluidObject;\n      };\n    };\n    ghimage: string;\n    excerpt: string;\n    title: string;\n    date: string;\n    draft?: boolean;\n    tags: string[];\n  };\n}\n\nconst PageTemplate = ({ data, pageContext, location }: PageTemplateProps) => {\n  const post = data.markdownRemark;\n  console.log(data.relatedPosts.edges[0].node);\n  const { relatedPosts } = data;\n  let width = '';\n  let height = '';\n  if (post.frontmatter.image?.childImageSharp) {\n    width = post.frontmatter.image.childImageSharp.fluid.sizes.split(', ')[1].split('px')[0];\n    height = String(Number(width) / post.frontmatter.image.childImageSharp.fluid.aspectRatio);\n  }\n\n  const date = new Date(post.frontmatter.date);\n  // 2018-08-20\n  const datetime = format(date, 'yyyy-MM-dd');\n  // 20 AUG 2018\n  const displayDatetime = format(date, 'dd LLL yyyy');\n\n  return (\n    <IndexLayout className=\"post-template\">\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{post.frontmatter.title}</title>\n\n        <meta name=\"description\" content={post.frontmatter.excerpt || post.excerpt} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"article\" />\n        <meta property=\"og:title\" content={post.frontmatter.title} />\n        <meta property=\"og:description\" content={post.frontmatter.excerpt || post.excerpt} />\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n        {post.frontmatter.image?.childImageSharp && (\n          <meta\n            property=\"og:image\"\n            content={`${config.siteUrl}${post.frontmatter.image.childImageSharp.fluid.src}`}\n          />\n        )}\n        <meta property=\"article:published_time\" content={post.frontmatter.date} />\n        {/* not sure if modified time possible */}\n        {/* <meta property=\"article:modified_time\" content=\"2018-08-20T15:12:00.000Z\" /> */}\n        {post.frontmatter.tags && (\n          <meta property=\"article:tag\" content={post.frontmatter.tags[0]} />\n        )}\n\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        {config.facebook && <meta property=\"article:author\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={post.frontmatter.title} />\n        <meta name=\"twitter:description\" content={post.frontmatter.excerpt || post.excerpt} />\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n        {post.frontmatter.image?.childImageSharp && (\n          <meta\n            name=\"twitter:image\"\n            content={`${config.siteUrl}${post.frontmatter.image.childImageSharp.fluid.src}`}\n          />\n        )}\n        <meta name=\"twitter:label1\" content=\"Written by\" />\n        <meta name=\"twitter:label2\" content=\"Filed under\" />\n        {post.frontmatter.tags && <meta name=\"twitter:data2\" content={post.frontmatter.tags[0]} />}\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        {config.twitter && (\n          <meta\n            name=\"twitter:creator\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        {width && <meta property=\"og:image:width\" content={width} />}\n        {height && <meta property=\"og:image:height\" content={height} />}\n      </Helmet>\n      <Wrapper css={PostTemplate}>\n        <header className=\"site-header\">\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isPost post={post.frontmatter} />\n            </div>\n          </div>\n        </header>\n        <main id=\"site-main\" className=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            {/* TODO: no-image css tag? */}\n            <article css={[PostFull, !post.frontmatter.image && NoImage]}>\n              <PostFullHeader className=\"post-full-header\">\n                <PostFullTags className=\"post-card-primary-tag\">\n                  {\n                    post.frontmatter.tags && post.frontmatter.tags.length > 0 && post.frontmatter.tags.map((tag, index, arr) => {\n                      return (\n                        <Link key={tag} to={`/tags/${_.kebabCase(tag)}/`}>\n                          <span>\n                            {tag}\n                            {index === arr.length - 1 || ', '}\n                          </span>\n                        </Link>\n                      );\n                    })\n                  }\n                </PostFullTags>\n                <PostFullTitle className=\"post-full-title\">{post.frontmatter.title}</PostFullTitle>\n                <PostFullCustomExcerpt className=\"post-full-custom-excerpt\">\n                  {post.frontmatter.excerpt}\n                </PostFullCustomExcerpt>\n                <PostFullByline className=\"post-full-byline\">\n                  <section className=\"post-full-byline-content\">\n                    <section className=\"post-full-byline-meta\">\n                      <div className=\"byline-meta-content\">\n                        <time className=\"byline-meta-date\" dateTime={datetime}>\n                          {displayDatetime}\n                        </time>\n                        <span className=\"byline-reading-time\">\n                          <span className=\"bull\">&bull;</span> {post.timeToRead} min read\n                        </span>\n                      </div>\n                    </section>\n                  </section>\n                </PostFullByline>\n              </PostFullHeader>\n\n              {post.frontmatter.image?.childImageSharp && (\n                <PostFullImage>\n                  <Img\n                    style={{ height: '100%' }}\n                    fluid={post.frontmatter.image.childImageSharp.fluid}\n                    alt={post.frontmatter.title}\n                  />\n                </PostFullImage>\n              )}\n              <PostContent htmlAst={post.htmlAst} />\n\n              {/* The big email subscribe modal content */}\n              {config.showSubscribe && <Subscribe title={config.title} />}\n            </article>\n          </div>\n        </main>\n\n        <ReadNext\n          currentPageSlug={location.pathname}\n          tags={post.frontmatter.tags}\n          relatedPosts={relatedPosts}\n          pageContext={pageContext}\n        />\n\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nconst PostTemplate = css`\n  .site-main {\n    margin-top: 64px;\n    background: #fff;\n    padding-bottom: 4vw;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    .site-main {\n      /* background: var(--darkmode); */\n      background: ${colors.darkmode};\n    }\n  }\n`;\n\nexport const PostFull = css`\n  position: relative;\n  z-index: 50;\n`;\n\nexport const NoImage = css`\n  .post-full-content {\n    padding-top: 0;\n  }\n\n  .post-full-content:before,\n  .post-full-content:after {\n    display: none;\n  }\n`;\n\nexport const PostFullHeader = styled.header`\n  position: relative;\n  margin: 0 auto;\n  padding: 70px 170px 50px;\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n\n  @media (max-width: 1170px) {\n    padding: 60px 11vw 50px;\n  }\n\n  @media (max-width: 800px) {\n    padding-right: 5vw;\n    padding-left: 5vw;\n  }\n\n  @media (max-width: 500px) {\n    padding: 20px 0 35px;\n  }\n`;\n\nexport const HomeFullHeader = styled.header`\n  position: relative;\n  margin: 0 auto;\n  padding: 50px 0px 0px;\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n\n  @media (max-width: 800px) {\n    padding-right: 5vw;\n    padding-left: 5vw;\n  }\n\n  @media (max-width: 500px) {\n    padding: 20px 0 35px;\n  }\n`;\n\nexport const HomeFullTitle = styled.h1`\n  border-bottom: 1px solid ${lighten('0.12', colors.lightgrey)};\n  margin: 0 0 0.2em;\n  color: ${setLightness('0.05', colors.darkgrey)};\n  @media (max-width: 500px) {\n    margin-top: 0.2em;\n    font-size: 3.3rem;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    color: rgba(255, 255, 255, 0.9);\n  }\n`;\n\nconst PostFullTags = styled.section`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  /* color: var(--midgrey); */\n  color: ${colors.midgrey};\n  font-size: 1.3rem;\n  line-height: 1.4em;\n  font-weight: 600;\n  text-transform: uppercase;\n`;\n\nconst PostFullCustomExcerpt = styled.p`\n  margin: 20px 0 0;\n  color: var(--midgrey);\n  font-family: Georgia, serif;\n  font-size: 2.3rem;\n  line-height: 1.4em;\n  font-weight: 300;\n\n  @media (max-width: 500px) {\n    font-size: 1.9rem;\n    line-height: 1.5em;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    /* color: color(var(--midgrey) l(+10%)); */\n    color: ${lighten('0.1', colors.midgrey)};\n  }\n`;\n\nconst PostFullByline = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 35px 0 0;\n  padding-top: 15px;\n  /* border-top: 1px solid color(var(--lightgrey) l(+10%)); */\n  border-top: 1px solid ${lighten('0.1', colors.lightgrey)};\n\n  .post-full-byline-content {\n    flex-grow: 1;\n    display: flex;\n    align-items: flex-start;\n  }\n\n  .post-full-byline-content .author-list {\n    justify-content: flex-start;\n    padding: 0 12px 0 0;\n  }\n\n  .post-full-byline-meta {\n    margin: 2px 0 0;\n    /* color: color(var(--midgrey) l(+10%)); */\n    color: ${lighten('0.1', colors.midgrey)};\n    font-size: 1.2rem;\n    line-height: 1.2em;\n    letter-spacing: 0.2px;\n    text-transform: uppercase;\n  }\n\n  .post-full-byline-meta h4 {\n    margin: 0 0 3px;\n    font-size: 1.3rem;\n    line-height: 1.4em;\n    font-weight: 500;\n  }\n\n  .post-full-byline-meta h4 a {\n    /* color: color(var(--darkgrey) l(+10%)); */\n    color: ${lighten('0.1', colors.darkgrey)};\n  }\n\n  .post-full-byline-meta h4 a:hover {\n    /* color: var(--darkgrey); */\n    color: ${colors.darkgrey};\n  }\n\n  .post-full-byline-meta .bull {\n    display: inline-block;\n    margin: 0 4px;\n    opacity: 0.6;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    /* border-top-color: color(var(--darkmode) l(+15%)); */\n    border-top-color: ${lighten('0.15', colors.darkmode)};\n\n    .post-full-byline-meta h4 a {\n      color: rgba(255, 255, 255, 0.75);\n    }\n\n    .post-full-byline-meta h4 a:hover {\n      color: #fff;\n    }\n  }\n`;\n\nexport const PostFullTitle = styled.h1`\n  border-bottom: 1px solid ${lighten('0.12', colors.lightgrey)};\n  margin: 0 0 0.2em;\n  color: ${setLightness('0.05', colors.darkgrey)};\n  @media (max-width: 500px) {\n    margin-top: 0.2em;\n    font-size: 3.3rem;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    color: rgba(255, 255, 255, 0.9);\n  }\n`;\n\nconst PostFullImage = styled.figure`\n  margin: 25px 0 50px;\n  height: 400px;\n  background: ${colors.lightgrey} center center;\n  background-size: cover;\n  border-radius: 5px;\n\n  @media (max-width: 1170px) {\n    margin: 25px -6vw 50px;\n    border-radius: 0;\n    img {\n      max-width: 1170px;\n    }\n  }\n\n  @media (max-width: 800px) {\n    height: 400px;\n  }\n  @media (max-width: 500px) {\n    margin-bottom: 4vw;\n    height: 350px;\n  }\n`;\n\nexport const query = graphql`\n  query($slug: String, $primaryTag: String) {\n    logo: file(relativePath: { eq: \"img/ghost-logo.png\" }) {\n      childImageSharp {\n        fixed {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      htmlAst\n      excerpt\n      timeToRead\n      frontmatter {\n        title\n        userDate: date(formatString: \"D MMMM YYYY\")\n        date\n        tags\n        excerpt\n        image {\n          childImageSharp {\n            fluid(maxWidth: 3720) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n    relatedPosts: allMarkdownRemark(\n      filter: { frontmatter: { tags: { in: [$primaryTag] }, draft: { ne: true } } }\n      limit: 5\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          timeToRead\n          excerpt\n          frontmatter {\n            title\n            date\n            layout\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default PageTemplate;\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport { darken } from 'polished';\nimport { css } from '@emotion/core';\n\nimport { colors } from '../styles/colors';\n\nexport interface PaginationProps {\n  currentPage: number;\n  numPages: number;\n}\n\nconst Pagination: React.FunctionComponent<PaginationProps> = ({ currentPage, numPages }) => {\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\n  const nextPage = (currentPage + 1).toString();\n\n  return (\n    <nav css={navCss}>\n      <div>\n        {!isFirst && (\n          <Link to={prevPage} rel=\"prev\">\n            {/* << symbol */}\n            {String.fromCharCode(171)}\n          </Link>\n        )}\n\n        {Array.from({ length: numPages }, (_, i) => (\n          <Link key={`pagination-number${i + 1}`} className={i + 1 === currentPage ? 'active' : ''} to={`/${i === 0 ? '' : i + 1}`}>\n            {i + 1}\n          </Link>\n        ))}\n\n        {!isLast && (\n          <Link to={nextPage} rel=\"next\">\n            {/* >> symbol */}\n            {String.fromCharCode(187)}\n          </Link>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nconst navCss = css`\n  text-align: center;\n  div {\n    display: inline-block;\n  }\n\n  a {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\n    background: #fff;\n    color: black;\n    float: left;\n    padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color .3s;\n    border: 2px solid #ddd;\n    margin: 0 4px;\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\n    border-radius: 6px;\n    margin-bottom: 5px;\n    min-width: 50px;\n\n    &.active {\n      -webkit-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      -moz-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n    }\n\n    &:hover:not(.active) {\n      background-color: #ddd;\n    }\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`;\n\nexport default Pagination;\n","import { Link } from 'gatsby';\nimport _ from 'lodash';\nimport { lighten } from 'polished';\nimport React from 'react';\n\nimport { css } from '@emotion/core';\nimport styled from '@emotion/styled';\n\nimport { colors } from '../styles/colors';\nimport { PageContext } from '../templates/post';\n\nexport interface ProjectCardProps {\n  post: PageContext;\n  large?: boolean;\n}\n\nexport const ProjectCard: React.FC<ProjectCardProps> = ({ post, large = true }) => {\n  const { ghimage } = post.frontmatter;\n  const { title } = post.frontmatter;\n\n  return (\n    <article\n      className={`post-card ${post.frontmatter.image ? '' : 'no-image'} ${\n        large ? 'post-card-large' : ''\n      }`}\n      css={[PostCardStyles, large && PostCardLarge]}\n    >\n      {ghimage && (\n        <ProjectCardImage href={`https://github.com/ScottG489/${title}`} target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={ghimage} alt={`${title} GitHub repo card`}/>\n        </ProjectCardImage>\n      )}\n      <PostCardContent className=\"post-card-content\">\n        <PostCardHeader className=\"post-card-header\">\n          {\n            post.frontmatter.tags && post.frontmatter.tags.length > 0 && post.frontmatter.tags.map((tag, index, arr) => {\n              return (\n                <Link\n                  key={tag} className=\"post-card-primary-tag\"\n                  to={`/tags/${_.kebabCase(tag)}/`}\n                >\n                  {tag}\n                  {index === arr.length - 1 || ', '}\n                </Link>\n              );\n            })\n          }\n        </PostCardHeader>\n        <PostCardContentText className=\"post-card-content-link\">\n          <PostCardTitle className=\"post-card-title\">{post.frontmatter.title}</PostCardTitle>\n          <PostCardExcerpt className=\"post-card-excerpt\">\n            <p>{post.frontmatter.excerpt || post.excerpt}</p>\n          </PostCardExcerpt>\n        </PostCardContentText>\n      </PostCardContent>\n    </article>\n  );\n};\n\nconst PostCardStyles = css`\n  position: relative;\n  flex: 1 1 301px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  margin: 0 0 20px;\n  /* border-bottom: 1px solid color(var(--lightgrey) l(+12%)); */\n  border-bottom: 1px solid ${lighten('0.12', colors.lightgrey)};\n  background-size: cover;\n\n  @media (prefers-color-scheme: dark) {\n    /* border-bottom-color: color(var(--darkmode) l(+8%)); */\n    border-bottom-color: ${lighten('0.08', colors.darkmode)};\n  }\n`;\n\nconst PostCardLarge = css`\n  @media (min-width: 795px) {\n    flex: 1 1 100%;\n    flex-direction: row;\n    border-top: 0;\n\n    :not(.no-image) .post-card-header {\n      margin-top: 0;\n    }\n\n    .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n      min-height: 380px;\n    }\n\n    .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n\n  .post-card-primary-tag {\n    margin: 0 0 0.2em;\n    /* color: var(--blue); */\n    color: ${colors.blue};\n    font-size: 1.2rem;\n    font-weight: 500;\n    letter-spacing: 0.2px;\n    text-transform: uppercase;\n  }\n`;\n\nconst PostCardContent = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst PostCardContentText = styled.div`\n  .post-card-content-link {\n    padding: 0 0 0 40px;\n  }\n`;\n\nconst PostCardTitle = styled.h2`\n  margin: 0 0 0.4em;\n  line-height: 1.15em;\n  transition: color 0.2s ease-in-out;\n\n  @media (prefers-color-scheme: dark) {\n    color: rgba(255, 255, 255, 0.85);\n  }\n`;\n\nconst PostCardExcerpt = styled.section`\n  font-family: Georgia, serif;\n\n  @media (prefers-color-scheme: dark) {\n    /* color: color(var(--midgrey) l(+10%)); */\n    color: ${lighten('0.1', colors.midgrey)} !important;\n  }\n`;\n\nconst PostCardHeader = styled.header`\n  @media (min-width: 795px) {\n    margin: 15px 40px 0;\n  }\n\n  margin: 15px 0 0;\n`;\n\nconst ProjectCardImage = styled.a`\n  align-self: center;\n`;\n\nexport const StaticAvatar = css`\n  display: block;\n  overflow: hidden;\n  margin: 0 0 0 -6px;\n  width: 34px;\n  height: 34px;\n  border: #fff 2px solid;\n  border-radius: 100%;\n\n  @media (prefers-color-scheme: dark) {\n    /* border-color: color(var(--darkgrey) l(+2%)); */\n    border-color: ${lighten('0.02', colors.darkgrey)};\n  }\n`;\n\nexport const AuthorProfileImage = css`\n  display: block;\n  width: 100%;\n  height: 100%;\n  /* background: color(var(--lightgrey) l(+10%)); */\n  background: ${lighten('0.1', colors.lightgrey)};\n  border-radius: 100%;\n  object-fit: cover;\n\n  @media (prefers-color-scheme: dark) {\n    background: ${colors.darkmode};\n  }\n`;\n","import { graphql } from 'gatsby';\nimport { FixedObject } from 'gatsby-image';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { css } from '@emotion/core';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport Pagination from '../components/Pagination';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  Posts,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteHeaderStyles,\n} from '../styles/shared';\nimport config from '../website-config';\nimport { HomeFullHeader, HomeFullTitle, PageContext } from './post';\nimport { ProjectCard } from '../components/ProjectCard';\n\nexport interface IndexProps {\n  pageContext: {\n    currentPage: number;\n    numPages: number;\n  };\n  data: {\n    logo: {\n      childImageSharp: {\n        fixed: FixedObject;\n      };\n    };\n    header: {\n      childImageSharp: {\n        fixed: FixedObject;\n      };\n    };\n    allMarkdownRemark: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst IndexPage: React.FC<IndexProps> = props => {\n  const { width, height } = props.data.header.childImageSharp.fixed;\n  const posts = props.data.allMarkdownRemark.edges.filter(post => {\n    return post.node.fields.layout === 'post';\n  });\n  const projects = props.data.allMarkdownRemark.edges.filter(post => {\n    return post.node.fields.layout === 'project';\n  });\n\n  return (\n    <IndexLayout css={HomePosts}>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta\n          property=\"og:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\n        />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        {config.googleSiteVerification && (\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta\n          name=\"twitter:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\n        />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width.toString()} />\n        <meta property=\"og:image:height\" content={height.toString()} />\n      </Helmet>\n      <Wrapper>\n        <div\n          css={[outer, SiteHeader, SiteHeaderStyles]}\n          className=\"site-header-background\"\n          style={{\n            backgroundImage: `url('${props.data.header.childImageSharp.fixed.src}')`,\n          }}\n        >\n          <div css={inner}>\n            <SiteNav isHome />\n            <SiteHeaderContent className=\"site-header-conent\">\n              <SiteTitle className=\"site-title\">\n                {props.data.logo ? (\n                  <img\n                    style={{ maxHeight: '200px' }}\n                    src={props.data.logo.childImageSharp.fixed.src}\n                    alt={config.title}\n                  />\n                ) : (\n                  config.title\n                )}\n              </SiteTitle>\n              <SiteDescription>{config.description}</SiteDescription>\n            </SiteHeaderContent>\n          </div>\n        </div>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={[inner, Posts]}>\n            <HomeFullHeader className=\"post-full-header\">\n              <HomeFullTitle className=\"post-full-title\">Posts</HomeFullTitle>\n            </HomeFullHeader>\n            <div css={[PostFeed]}>\n              {posts.map((post, index) => {\n                // filter out drafts in production\n                return (\n                  (post.node.frontmatter.draft !== true ||\n                    process.env.NODE_ENV !== 'production') && (\n                    <PostCard key={post.node.fields.slug} post={post.node} large={index === 0} />\n                  )\n                );\n              })}\n            </div>\n            <HomeFullHeader className=\"post-full-header\">\n              <HomeFullTitle className=\"post-full-title\">Projects</HomeFullTitle>\n            </HomeFullHeader>\n            <div css={[PostFeed]}>\n              {projects.map(project => {\n                // filter out drafts in production\n                return (\n                  (project.node.frontmatter.draft !== true ||\n                    process.env.NODE_ENV !== 'production') && (\n                    <ProjectCard key={project.node.fields.slug} post={project.node} />\n                  )\n                );\n              })}\n            </div>\n          </div>\n        </main>\n        {props.children}\n        {props.pageContext.numPages > 1 && (\n          <Pagination\n            currentPage={props.pageContext.currentPage}\n            numPages={props.pageContext.numPages}\n          />\n        )}\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    logo: file(relativePath: { eq: \"img/scott-logo.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    header: file(relativePath: { eq: \"img/blog-cover.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 2000, quality: 100) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            date\n            tags\n            draft\n            excerpt\n            image {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            ghimage\n          }\n          excerpt\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst HomePosts = css`\n  @media (min-width: 795px) {\n    .post-card-large {\n      flex: 1 1 100%;\n      flex-direction: row;\n      border-top: 0;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large:not(.no-image) .post-card-header {\n      margin: 15px 40px 0;\n    }\n\n    .post-card-large .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n    }\n\n    .post-card-large .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-large .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"sourceRoot":""}