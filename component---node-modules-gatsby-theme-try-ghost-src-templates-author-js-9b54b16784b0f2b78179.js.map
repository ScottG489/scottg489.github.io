{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-try-ghost/src/templates/author.js"],"names":["pageQuery","Author","data","location","pageContext","posts","allGhostPost","edges","author","ghostAuthor","Consumer","g","Fragment","type","render","overlay","header","numberOfPosts","totalPosts","globalState","isAuthor"],"mappings":"6FAAA,iHA8CaA,EAAS,YAoBPC,UAjDA,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACxBC,EAAQH,EAAKI,aAAaC,MAC1BC,EAASN,EAAKO,YAEpB,OACI,wBAAC,IAAmBC,SAApB,MAA+B,SAAAC,GAAC,OAC5B,wBAAC,UAAMC,SAAP,KACI,wBAAC,IAAD,CAAUT,SAAUA,EAAUD,KAAMA,EAAMW,KAAK,YAC/C,wBAAC,IAAD,CAAkBC,OAAS,SAAAC,GAAO,OAC9B,wBAAC,IAAD,CAAQP,OAAQA,EAAQO,QAASA,EAC7BC,OAAQ,wBAAC,IAAD,CAAcD,QAASA,EAASP,OAAQA,EAAQS,cAAeb,EAAYc,cACnF,wBAAC,IAAD,CAAUC,YAAaR,EAAGP,YAAaA,EAAaC,MAAOA,EAAOe,UAAU","file":"component---node-modules-gatsby-theme-try-ghost-src-templates-author-js-9b54b16784b0f2b78179.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { Layout, PostView, HeaderAuthor } from '../components/common'\nimport { OverlayContainer } from '../components/common/effects'\n\nimport { MetaData } from '../components/common/meta'\n\nimport { GlobalStateContext } from \"../context/GlobalState\"\n\n/**\n* Author page (/author/:slug)\n*\n* Loads all posts for the requested author incl. pagination.\n*\n*/\nconst Author = ({ data, location, pageContext }) => {\n    const posts = data.allGhostPost.edges\n    const author = data.ghostAuthor\n\n    return (\n        <GlobalStateContext.Consumer>{ g => (\n            <React.Fragment>\n                <MetaData location={location} data={data} type=\"profile\"/>\n                <OverlayContainer render={ overlay => (\n                    <Layout author={author} overlay={overlay}\n                        header={<HeaderAuthor overlay={overlay} author={author} numberOfPosts={pageContext.totalPosts}/>}>\n                        <PostView globalState={g} pageContext={pageContext} posts={posts} isAuthor={true} />\n                    </Layout>\n                )}/>\n            </React.Fragment>\n        )}\n        </GlobalStateContext.Consumer>\n    )\n}\n\nAuthor.propTypes = {\n    data: PropTypes.shape({\n        ghostAuthor: PropTypes.object.isRequired,\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.object.isRequired,\n    pageContext: PropTypes.object.isRequired,\n}\n\nexport const pageQuery = graphql`\n    query GhostAuthorQuery($postIds: [String!]!, $slug: String!, $limit: Int!, $skip: Int!) {\n        ghostAuthor(slug: { eq: $slug }) {\n            ...GhostAuthorFields\n        }\n        allGhostPost(\n            filter: {id: { in: $postIds }, authors: {elemMatch: {slug: {eq: $slug}}}},\n            limit: $limit,\n            skip: $skip,\n            sort: { fields: [featured, published_at], order: [DESC, DESC] }\n        ) {\n            edges {\n                node {\n                ...GhostPostFieldsForIndex\n                }\n            }\n        }\n    }\n`\n\nexport default Author\n"],"sourceRoot":""}