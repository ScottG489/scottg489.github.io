{"version":3,"sources":["webpack:///./src/templates/project-tags.tsx"],"names":["Tags","pageContext","data","location","tag","edges","projects","totalCount","length","tagData","allTagYaml","find","n","node","id","toLowerCase","lang","config","title","name","content","description","property","siteUrl","pathname","facebook","twitter","split","className","css","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","isHome","SiteHeaderBackground","backgroundImage","image","childImageSharp","fluid","src","SiteMain","PostFeed","map","key","post"],"mappings":"4FACA,4IAmIeA,UA7EF,IAAuD,gBAAtD,YAAEC,EAAF,KAAeC,EAAf,SAAqBC,GAAiC,EAClE,MAAMC,EAAMH,EAAYG,IAAMH,EAAYG,IAAM,IAC1C,MAAEC,GAAUH,EAAKI,SACjBC,EAAaF,EAAMG,OACnBC,EAAUP,EAAKQ,WAAWL,MAAMM,KACpCC,GAAKA,EAAEC,KAAKC,GAAGC,gBAAkBX,EAAIW,eAGvC,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,oBAAMC,KAAMC,IAAOD,OACnB,yBACGZ,EADH,MACWa,IAAOC,OAElB,oBAAMC,KAAK,cAAcC,QAASX,WAASI,KAAOJ,EAAQI,KAAKQ,YAAc,KAC7E,oBAAMC,SAAS,eAAeF,QAASH,IAAOC,QAC9C,oBAAMI,SAAS,UAAUF,QAAQ,YACjC,oBAAME,SAAS,WAAWF,QAAU,GAAEhB,OAASa,IAAOC,UACtD,oBAAMI,SAAS,SAASF,QAASH,IAAOM,QAAUpB,EAASqB,WAC1DP,IAAOQ,UAAY,oBAAMH,SAAS,oBAAoBF,QAASH,IAAOQ,WACvE,oBAAMN,KAAK,eAAeC,QAAQ,wBAClC,oBAAMD,KAAK,gBAAgBC,QAAU,GAAEhB,OAASa,IAAOC,UACvD,oBAAMC,KAAK,cAAcC,QAASH,IAAOM,QAAUpB,EAASqB,WAC3DP,IAAOS,SACN,oBACEP,KAAK,eACLC,QAAU,IAAGH,IAAOS,QAAQC,MAAM,wBAAwB,MAIhE,YAAC,IAAD,KACE,sBACEC,UAAU,sBACVC,IAAG,CAAGC,IAAYC,IAAf,QAEH,mBAAKF,IAAG,CAAGG,IAAOC,IAAV,QACN,mBAAKJ,IAAKK,KACR,YAAC,IAAD,CAASC,QAAQ,MAGrB,YAAC,IAAD,CACEN,IAAG,CAAGG,IAAOI,IAAV,OACHC,gBAAiB5B,SAAF,UAAEA,EAASI,YAAX,iBAAE,EAAeyB,aAAjB,iBAAE,EAAsBC,uBAAxB,iBAAE,EAAuCC,aAAzC,aAAE,EAA8CC,IAC/Db,UAAU,0BAEV,YAAC,IAAD,CAAmBC,IAAKK,IAAON,UAAU,uBACvC,YAAC,IAAD,CAAWA,UAAU,cAAcxB,GACnC,YAAC,IAAD,CAAiBwB,UAAU,oBACxBnB,WAASI,KAAKQ,YACbZ,EAAQI,KAAKQ,YAEb,iDACmBd,EAAa,GAAQA,EAAF,YACpB,IAAfA,GAAoB,YACL,IAAfA,GAAoB,mBAOjC,oBAAMO,GAAG,YAAYe,IAAG,CAAGa,IAAUV,IAAb,QACtB,mBAAKH,IAAKK,KACR,mBAAKL,IAAG,CAAGc,IAAH,QACLtC,EAAMuC,IAAI,QAAC,KAAE/B,GAAH,SACT,YAAC,IAAD,CAAagC,IAAKhC,EAAKK,MAAO4B,KAAMjC,SAK5C,YAAC,IAAD","file":"component---src-templates-project-tags-tsx-ab60926d782315e56fb9.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\nimport { FluidObject } from 'gatsby-image';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteNavMain,\n  SiteArchiveHeader,\n  ResponsiveHeaderBackground,\n  SiteHeaderBackground,\n} from '../styles/shared';\nimport { Helmet } from 'react-helmet';\nimport config from '../website-config';\nimport { ProjectCard } from '../components/ProjectCard';\nimport { ProjectContext } from './projects';\n\ninterface TagTemplateProps {\n  location: Location;\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          layout: string;\n          image?: {\n            childImageSharp: {\n              fluid: FluidObject;\n            };\n          };\n        };\n      }>;\n    };\n    projects: {\n      edges: Array<{\n        node: ProjectContext;\n      }>;\n    };\n  };\n}\n\nconst Tags = ({ pageContext, data, location }: TagTemplateProps) => {\n  const tag = pageContext.tag ? pageContext.tag : '';\n  const { edges } = data.projects;\n  const totalCount = edges.length;\n  const tagData = data.allTagYaml.edges.find(\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {tag} - {config.title}\n        </title>\n        <meta name=\"description\" content={tagData?.node ? tagData.node.description : ''} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header\n          className=\"site-archive-header\"\n          css={[SiteHeader, SiteArchiveHeader]}\n        >\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} />\n            </div>\n          </div>\n          <ResponsiveHeaderBackground\n            css={[outer, SiteHeaderBackground]}\n            backgroundImage={tagData?.node?.image?.childImageSharp?.fluid?.src}\n            className=\"site-header-background\"\n          >\n            <SiteHeaderContent css={inner} className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">{tag}</SiteTitle>\n              <SiteDescription className=\"site-description\">\n                {tagData?.node.description ? (\n                  tagData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} projects`}\n                    {totalCount === 1 && '1 project'}\n                    {totalCount === 0 && 'No projects'}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </ResponsiveHeaderBackground>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed]}>\n              {edges.map(({ node }) => (\n                <ProjectCard key={node.title} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n        }\n      }\n    }\n    projects: allProjectsYaml(\n      filter: { tags: { in: [$tag] } }\n     ) {\n      edges {\n        node {\n          title\n          link\n          ghimage\n          excerpt\n          tags\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}