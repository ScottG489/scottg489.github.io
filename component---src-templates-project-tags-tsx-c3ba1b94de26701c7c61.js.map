{"version":3,"sources":["webpack:///./src/components/ProjectCard.tsx","webpack:///./src/components/Footer.tsx","webpack:///./src/templates/project-tags.tsx"],"names":["ProjectCard","post","large","ghimage","frontmatter","title","className","image","css","PostCardStyles","PostCardLarge","ProjectCardImage","href","target","rel","src","alt","PostCardContent","PostCardHeader","tags","length","map","tag","index","arr","key","to","_","kebabCase","PostCardContentText","PostCardTitle","PostCardExcerpt","excerpt","lighten","colors","lightgrey","darkmode","blue","midgrey","darkgrey","Footer","outer","SiteFooter","inner","SiteFooterContent","config","Date","getFullYear","footer","SiteFooterNav","github","twitter","facebook","setLightness","Tags","pageContext","data","location","edges","totalCount","allMarkdownRemark","tagData","allTagYaml","find","n","node","id","toLowerCase","lang","name","content","description","property","siteUrl","pathname","split","SiteHeader","SiteArchiveHeader","SiteNavMain","isHome","SiteHeaderBackground","backgroundImage","childImageSharp","fluid","SiteMain","PostFeed","fields","slug","pageQuery"],"mappings":"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","file":"component---src-templates-project-tags-tsx-c3ba1b94de26701c7c61.js","sourcesContent":["import { Link } from 'gatsby';\nimport _ from 'lodash';\nimport { lighten } from 'polished';\nimport React from 'react';\n\nimport { css } from '@emotion/core';\nimport styled from '@emotion/styled';\n\nimport { colors } from '../styles/colors';\nimport { PageContext } from '../templates/post';\n\nexport interface ProjectCardProps {\n  post: PageContext;\n  large?: boolean;\n}\n\nexport const ProjectCard: React.FC<ProjectCardProps> = ({ post, large = true }) => {\n  const { ghimage } = post.frontmatter;\n  const { title } = post.frontmatter;\n\n  return (\n    <article\n      className={`post-card ${post.frontmatter.image ? '' : 'no-image'} ${\n        large ? 'post-card-large' : ''\n      }`}\n      css={[PostCardStyles, large && PostCardLarge]}\n    >\n      {ghimage && (\n        <ProjectCardImage href={`https://github.com/ScottG489/${title}`} target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={ghimage} alt={`${title} GitHub repo card`}/>\n        </ProjectCardImage>\n      )}\n      <PostCardContent className=\"post-card-content\">\n        <PostCardHeader className=\"post-card-header\">\n          {\n            post.frontmatter.tags && post.frontmatter.tags.length > 0 && post.frontmatter.tags.map((tag, index, arr) => {\n              return (\n                <Link\n                  key={tag} className=\"post-card-primary-tag\"\n                  to={`/projects/tags/${_.kebabCase(tag)}/`}\n                >\n                  {tag}\n                  {index === arr.length - 1 || ', '}\n                </Link>\n              );\n            })\n          }\n        </PostCardHeader>\n        <PostCardContentText className=\"post-card-content-link\">\n          <PostCardTitle className=\"post-card-title\">{post.frontmatter.title}</PostCardTitle>\n          <PostCardExcerpt className=\"post-card-excerpt\">\n            <p>{post.frontmatter.excerpt || post.excerpt}</p>\n          </PostCardExcerpt>\n        </PostCardContentText>\n      </PostCardContent>\n    </article>\n  );\n};\n\nconst PostCardStyles = css`\n  position: relative;\n  flex: 1 1 301px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  margin: 0 0 20px;\n  /* border-bottom: 1px solid color(var(--lightgrey) l(+12%)); */\n  border-bottom: 1px solid ${lighten('0.12', colors.lightgrey)};\n  background-size: cover;\n\n  @media (prefers-color-scheme: dark) {\n    /* border-bottom-color: color(var(--darkmode) l(+8%)); */\n    border-bottom-color: ${lighten('0.08', colors.darkmode)};\n  }\n`;\n\nconst PostCardLarge = css`\n  @media (min-width: 795px) {\n    flex: 1 1 100%;\n    flex-direction: row;\n    border-top: 0;\n\n    :not(.no-image) .post-card-header {\n      margin-top: 0;\n    }\n\n    .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n      min-height: 380px;\n    }\n\n    .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n\n  .post-card-primary-tag {\n    margin: 0 0 0.2em;\n    /* color: var(--blue); */\n    color: ${colors.blue};\n    font-size: 1.2rem;\n    font-weight: 500;\n    letter-spacing: 0.2px;\n    text-transform: uppercase;\n  }\n`;\n\nconst PostCardContent = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst PostCardContentText = styled.div`\n  .post-card-content-link {\n    padding: 0 0 0 40px;\n  }\n`;\n\nconst PostCardTitle = styled.h2`\n  margin: 0 0 0.4em;\n  line-height: 1.15em;\n  transition: color 0.2s ease-in-out;\n\n  @media (prefers-color-scheme: dark) {\n    color: rgba(255, 255, 255, 0.85);\n  }\n`;\n\nconst PostCardExcerpt = styled.section`\n  font-family: Georgia, serif;\n\n  @media (prefers-color-scheme: dark) {\n    /* color: color(var(--midgrey) l(+10%)); */\n    color: ${lighten('0.1', colors.midgrey)} !important;\n  }\n`;\n\nconst PostCardHeader = styled.header`\n  @media (min-width: 795px) {\n    margin: 15px 40px 0;\n  }\n\n  margin: 15px 0 0;\n`;\n\nconst ProjectCardImage = styled.a`\n  align-self: center;\n`;\n\nexport const StaticAvatar = css`\n  display: block;\n  overflow: hidden;\n  margin: 0 0 0 -6px;\n  width: 34px;\n  height: 34px;\n  border: #fff 2px solid;\n  border-radius: 100%;\n\n  @media (prefers-color-scheme: dark) {\n    /* border-color: color(var(--darkgrey) l(+2%)); */\n    border-color: ${lighten('0.02', colors.darkgrey)};\n  }\n`;\n\nexport const AuthorProfileImage = css`\n  display: block;\n  width: 100%;\n  height: 100%;\n  /* background: color(var(--lightgrey) l(+10%)); */\n  background: ${lighten('0.1', colors.lightgrey)};\n  border-radius: 100%;\n  object-fit: cover;\n\n  @media (prefers-color-scheme: dark) {\n    background: ${colors.darkmode};\n  }\n`;\n","import { Link } from 'gatsby';\nimport { setLightness } from 'polished';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nimport { colors } from '../styles/colors';\nimport { outer, inner } from '../styles/shared';\nimport config from '../website-config';\n\nexport const Footer: React.FC = () => {\n  return (\n    <footer css={[outer, SiteFooter]}>\n      <div css={[inner, SiteFooterContent]}>\n        <section className=\"copyright\">\n          <Link to=\"/\">{config.title}</Link> &copy; {new Date().getFullYear()}{' '}\n          {config.footer && `| ${config.footer}`}\n          <a href=\"https://github.com/scttcper/gatsby-casper/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            scttcper/gatsby-casper\n          </a>\n        </section>\n        <SiteFooterNav>\n          <Link to=\"/\">Latest Posts</Link>\n          {config.github && (\n            <a href={config.github} target=\"_blank\" rel=\"noopener noreferrer\">\n              GitHub\n            </a>\n          )}\n          {config.twitter && (\n            <a href={config.twitter} target=\"_blank\" rel=\"noopener noreferrer\">\n              Twitter\n            </a>\n          )}\n          {config.facebook && (\n            <a href={config.facebook} target=\"_blank\" rel=\"noopener noreferrer\">\n              Facebook\n            </a>\n          )}\n          <a href=\"/rss.xml\">RSS</a>\n        </SiteFooterNav>\n      </div>\n    </footer>\n  );\n};\n\nconst SiteFooter = css`\n  position: relative;\n  padding-top: 20px;\n  padding-bottom: 60px;\n  color: #fff;\n  background: ${setLightness('0.0015', colors.darkgrey)};\n`;\n\nconst SiteFooterContent = css`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n  color: rgba(255, 255, 255, 0.7);\n  font-size: 1.3rem;\n  a {\n    color: rgba(255, 255, 255, 0.7);\n  }\n  a:hover {\n    color: rgba(255, 255, 255, 1);\n    text-decoration: none;\n  }\n  @media (max-width: 650px) {\n    flex-direction: column;\n  }\n`;\n\nconst SiteFooterNav = styled.nav`\n  display: flex;\n\n  a {\n    position: relative;\n    margin-left: 20px;\n  }\n\n  a:before {\n    content: '';\n    position: absolute;\n    top: 11px;\n    left: -11px;\n    display: block;\n    width: 2px;\n    height: 2px;\n    background: #fff;\n    border-radius: 100%;\n  }\n\n  a:first-of-type:before {\n    display: none;\n  }\n  @media (max-width: 650px) {\n    a:first-of-type {\n      margin-left: 0;\n    }\n  }\n`;\n\n","import { graphql } from 'gatsby';\nimport React from 'react';\nimport { FluidObject } from 'gatsby-image';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteNavMain,\n  SiteArchiveHeader,\n  ResponsiveHeaderBackground,\n  SiteHeaderBackground,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport { Helmet } from 'react-helmet';\nimport config from '../website-config';\nimport {ProjectCard} from \"../components/ProjectCard\";\n\ninterface TagTemplateProps {\n  location: Location;\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          layout: string;\n          image?: {\n            childImageSharp: {\n              fluid: FluidObject;\n            };\n          };\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst Tags = ({ pageContext, data, location }: TagTemplateProps) => {\n  const tag = pageContext.tag ? pageContext.tag : '';\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagData = data.allTagYaml.edges.find(\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {tag} - {config.title}\n        </title>\n        <meta name=\"description\" content={tagData?.node ? tagData.node.description : ''} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header\n          className=\"site-archive-header\"\n          css={[SiteHeader, SiteArchiveHeader]}\n        >\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} />\n            </div>\n          </div>\n          <ResponsiveHeaderBackground\n            css={[outer, SiteHeaderBackground]}\n            backgroundImage={tagData?.node?.image?.childImageSharp?.fluid?.src}\n            className=\"site-header-background\"\n          >\n            <SiteHeaderContent css={inner} className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">{tag}</SiteTitle>\n              <SiteDescription className=\"site-description\">\n                {tagData?.node.description ? (\n                  tagData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\n                    {totalCount === 1 && '1 post'}\n                    {totalCount === 0 && 'No posts'}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </ResponsiveHeaderBackground>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed]}>\n              {edges.map(({ node }) => (\n                <ProjectCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } }, fileAbsolutePath: {regex: \"/content/projects/\"} }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            excerpt\n            tags\n            date\n            layout\n            ghimage\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1240) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}