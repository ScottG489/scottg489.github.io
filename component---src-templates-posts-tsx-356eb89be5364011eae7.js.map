{"version":3,"file":"component---src-templates-posts-tsx-356eb89be5364011eae7.js","mappings":"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","sources":["webpack://scottg489.github.io/./src/components/Pagination.tsx","webpack://scottg489.github.io/./src/templates/posts.tsx"],"sourcesContent":["import { Link } from 'gatsby';\nimport React from 'react';\nimport { darken } from 'polished';\nimport { css } from '@emotion/react';\n\nimport { colors } from '../styles/colors';\n\nexport interface PaginationProps {\n  currentPage: number;\n  numPages: number;\n}\n\nconst Pagination: React.FunctionComponent<PaginationProps> = ({ currentPage, numPages }) => {\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : `../${(currentPage - 1).toString()}`;\n  const nextPage = `../${(currentPage + 1).toString()}`;\n\n  return (\n    <nav css={navCss}>\n      <div>\n        {!isFirst && (\n          <Link to={prevPage} rel=\"prev\">\n            {/* << symbol */}\n            {String.fromCharCode(171)}\n          </Link>\n        )}\n\n        {Array.from({ length: numPages }, (_, i) => (\n          <Link\n            key={`pagination-number${i + 1}`}\n            className={i + 1 === currentPage ? 'active' : ''}\n            to={`/${i === 0 ? '' : i + 1}`}\n          >\n            {i + 1}\n          </Link>\n        ))}\n\n        {!isLast && (\n          <Link to={nextPage} rel=\"next\">\n            {/* >> symbol */}\n            {String.fromCharCode(187)}\n          </Link>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nconst navCss = css`\n  text-align: center;\n  div {\n    display: inline-block;\n  }\n\n  a {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\n    background: #fff;\n    color: black;\n    float: left;\n    padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color 0.3s;\n    border: 2px solid #ddd;\n    margin: 0 4px;\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\n    border-radius: 6px;\n    margin-bottom: 5px;\n    min-width: 50px;\n\n    &.active {\n      -webkit-box-shadow: inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      -moz-box-shadow: inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      box-shadow: inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n    }\n\n    &:hover:not(.active) {\n      background-color: #ddd;\n    }\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`;\n\nexport default Pagination;\n","import { graphql } from 'gatsby';\nimport {getImage, getSrc} from 'gatsby-plugin-image';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { css } from '@emotion/react';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport Pagination from '../components/Pagination';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  Posts,\n  SiteHeader,\n  SiteMain,\n} from '../styles/shared';\nimport config from '../website-config';\nimport { HomeFullHeader, HomeFullTitle, PageContext } from './post';\n\nexport interface PostsProps {\n  pageContext: {\n    currentPage: number;\n    numPages: number;\n  };\n  data: {\n    logo: any;\n    header: any;\n    posts: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst PostsPage: React.FC<PostsProps> = props => {\n  const width = getImage(props.data.header)?.width;\n  const height = getImage(props.data.header)?.height;\n  const posts = props.data.posts.edges;\n\n  return (\n    <IndexLayout css={HomePosts}>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta property=\"og:image\" content={`${config.siteUrl}${getSrc(props.data.header)}`} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        {config.googleSiteVerification && (\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta name=\"twitter:image\" content={`${config.siteUrl}${getSrc(props.data.header)}`} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width?.toString()} />\n        <meta property=\"og:image:height\" content={height?.toString()} />\n      </Helmet>\n      <Wrapper>\n        <div\n          css={[outer, SiteHeader]}\n          className=\"site-header-background\"\n          style={{\n            backgroundImage: `url('${getSrc(props.data.header)}')`,\n          }}\n        >\n          <div css={inner}>\n            <SiteNav />\n          </div>\n        </div>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={[inner, Posts]}>\n            <HomeFullHeader className=\"post-full-header\">\n              <HomeFullTitle className=\"post-full-title\">Posts</HomeFullTitle>\n            </HomeFullHeader>\n            <div css={[PostFeed]}>\n              {posts.map((post, index) =>\n                // filter out drafts in production\n                (\n                  (post.node.frontmatter.draft !== true\n                    || process.env.NODE_ENV !== 'production') && (\n                    <PostCard key={post.node.fields.slug} post={post.node} large={index === 0} />\n                  )\n                ),\n              )}\n            </div>\n          </div>\n        </main>\n        {props.children}\n        {props.pageContext.numPages > 1 && (\n          <Pagination\n            currentPage={props.pageContext.currentPage}\n            numPages={props.pageContext.numPages}\n          />\n        )}\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query postsPageQuery($skip: Int!, $limit: Int!) {\n    logo: file(relativePath: { eq: \"img/scott-logo.png\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED)\n      }\n    }\n    header: file(relativePath: { eq: \"posts/img/blog-cover.png\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 2000, quality: 100, layout: FIXED)\n      }\n    }\n    posts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true } }, fileAbsolutePath: {regex: \"/content/posts/\"} }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date\n            tags\n            draft\n            excerpt\n            image {\n              childImageSharp {\n                gatsbyImageData(layout: FULL_WIDTH)\n              }\n            }\n          }\n          excerpt\n          fields {\n            readingTime {\n              text\n            }\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst HomePosts = css`\n  @media (min-width: 795px) {\n    .post-card-large {\n      flex: 1 1 100%;\n      flex-direction: row;\n      border-top: 0;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large:not(.no-image) .post-card-header {\n      margin: 15px 40px 0;\n    }\n\n    .post-card-large .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n    }\n\n    .post-card-large .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-large .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n`;\n\nexport default PostsPage;\n"],"names":["navCss","css","darken","colors","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","to","rel","String","fromCharCode","Array","from","length","_","i","key","className","HomePosts","props","width","getImage","data","header","height","posts","edges","lang","config","name","content","property","getSrc","outer","SiteHeader","style","backgroundImage","inner","id","SiteMain","Posts","HomeFullHeader","HomeFullTitle","PostFeed","map","post","index","node","frontmatter","draft","fields","slug","large","children","pageContext"],"sourceRoot":""}