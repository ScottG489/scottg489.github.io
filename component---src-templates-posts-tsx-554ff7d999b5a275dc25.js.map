{"version":3,"sources":["webpack:///./src/templates/posts.tsx","webpack:///./src/components/Pagination.tsx"],"names":["pageQuery","HomePosts","PostsPage","props","width","height","data","header","childImageSharp","fixed","posts","edges","css","lang","config","title","name","content","description","property","siteUrl","src","facebook","googleSiteVerification","twitter","split","toString","outer","SiteHeader","className","style","backgroundImage","inner","id","SiteMain","Posts","PostFeed","map","post","index","node","frontmatter","draft","key","fields","slug","large","children","pageContext","numPages","currentPage","navCss","darken","colors","darkgrey","Pagination","isFirst","isLast","prevPage","nextPage","to","rel","String","fromCharCode","Array","from","length","_","i"],"mappings":"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","file":"component---src-templates-posts-tsx-554ff7d999b5a275dc25.js","sourcesContent":["import { graphql } from 'gatsby';\nimport { FixedObject } from 'gatsby-image';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { css } from '@emotion/core';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport Pagination from '../components/Pagination';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  Posts,\n  SiteHeader,\n  SiteMain,\n} from '../styles/shared';\nimport config from '../website-config';\nimport { HomeFullHeader, HomeFullTitle, PageContext } from './post';\n\nexport interface PostsProps {\n  pageContext: {\n    currentPage: number;\n    numPages: number;\n  };\n  data: {\n    logo: {\n      childImageSharp: {\n        fixed: FixedObject;\n      };\n    };\n    header: {\n      childImageSharp: {\n        fixed: FixedObject;\n      };\n    };\n    posts: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst PostsPage: React.FC<PostsProps> = props => {\n  const { width, height } = props.data.header.childImageSharp.fixed;\n  const posts = props.data.posts.edges;\n\n  return (\n    <IndexLayout css={HomePosts}>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta\n          property=\"og:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\n        />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        {config.googleSiteVerification && (\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta\n          name=\"twitter:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\n        />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width.toString()} />\n        <meta property=\"og:image:height\" content={height.toString()} />\n      </Helmet>\n      <Wrapper>\n        <div\n          css={[outer, SiteHeader]}\n          className=\"site-header-background\"\n          style={{\n            backgroundImage: `url('${props.data.header.childImageSharp.fixed.src}')`,\n          }}\n        >\n          <div css={inner}>\n            <SiteNav />\n          </div>\n        </div>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={[inner, Posts]}>\n            <HomeFullHeader className=\"post-full-header\">\n              <HomeFullTitle className=\"post-full-title\">Posts</HomeFullTitle>\n            </HomeFullHeader>\n            <div css={[PostFeed]}>\n              {posts.map((post, index) => {\n                // filter out drafts in production\n                return (\n                  (post.node.frontmatter.draft !== true ||\n                    process.env.NODE_ENV !== 'production') && (\n                    <PostCard key={post.node.fields.slug} post={post.node} large={index === 0} />\n                  )\n                );\n              })}\n            </div>\n          </div>\n        </main>\n        {props.children}\n        {props.pageContext.numPages > 1 && (\n          <Pagination\n            currentPage={props.pageContext.currentPage}\n            numPages={props.pageContext.numPages}\n          />\n        )}\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query postsPageQuery($skip: Int!, $limit: Int!) {\n    logo: file(relativePath: { eq: \"img/scott-logo.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    header: file(relativePath: { eq: \"posts/img/blog-cover.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 2000, quality: 100) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    posts: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true } }, fileAbsolutePath: {regex: \"/content/posts/\"} }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            date\n            tags\n            draft\n            excerpt\n            image {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst HomePosts = css`\n  @media (min-width: 795px) {\n    .post-card-large {\n      flex: 1 1 100%;\n      flex-direction: row;\n      border-top: 0;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large:not(.no-image) .post-card-header {\n      margin: 15px 40px 0;\n    }\n\n    .post-card-large .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n    }\n\n    .post-card-large .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-large .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n`;\n\nexport default PostsPage;\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport { darken } from 'polished';\nimport { css } from '@emotion/core';\n\nimport { colors } from '../styles/colors';\n\nexport interface PaginationProps {\n  currentPage: number;\n  numPages: number;\n}\n\nconst Pagination: React.FunctionComponent<PaginationProps> = ({ currentPage, numPages }) => {\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\n  const nextPage = (currentPage + 1).toString();\n\n  return (\n    <nav css={navCss}>\n      <div>\n        {!isFirst && (\n          <Link to={prevPage} rel=\"prev\">\n            {/* << symbol */}\n            {String.fromCharCode(171)}\n          </Link>\n        )}\n\n        {Array.from({ length: numPages }, (_, i) => (\n          <Link key={`pagination-number${i + 1}`} className={i + 1 === currentPage ? 'active' : ''} to={`/${i === 0 ? '' : i + 1}`}>\n            {i + 1}\n          </Link>\n        ))}\n\n        {!isLast && (\n          <Link to={nextPage} rel=\"next\">\n            {/* >> symbol */}\n            {String.fromCharCode(187)}\n          </Link>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nconst navCss = css`\n  text-align: center;\n  div {\n    display: inline-block;\n  }\n\n  a {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\n    background: #fff;\n    color: black;\n    float: left;\n    padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color .3s;\n    border: 2px solid #ddd;\n    margin: 0 4px;\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\n    border-radius: 6px;\n    margin-bottom: 5px;\n    min-width: 50px;\n\n    &.active {\n      -webkit-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      -moz-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n    }\n\n    &:hover:not(.active) {\n      background-color: #ddd;\n    }\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`;\n\nexport default Pagination;\n"],"sourceRoot":""}