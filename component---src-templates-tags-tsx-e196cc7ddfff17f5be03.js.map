{"version":3,"file":"component---src-templates-tags-tsx-e196cc7ddfff17f5be03.js","mappings":"6OAmIA,UA5Ea,IAAwD,IAAD,YAAtD,YAAEA,EAAF,KAAeC,EAAf,SAAqBC,GAAiC,EAClE,MAAMC,EAAMH,EAAYG,IAAMH,EAAYG,IAAM,IAC1C,MAAEC,EAAF,WAASC,GAAeJ,EAAKK,kBAC7BC,EAAUN,EAAKO,WAAWJ,MAAMK,MACpCC,GAAKA,EAAEC,KAAKC,GAAGC,gBAAkBV,EAAIU,gBAGvC,OACE,QAAC,IAAD,MACE,QAAC,IAAD,MACE,gBAAMC,KAAMC,EAAAA,EAAAA,QACZ,qBACGZ,EADH,MACWY,EAAAA,EAAAA,QAEX,gBAAMC,KAAK,cAAcC,QAASV,MAAAA,GAAAA,EAASI,KAAOJ,EAAQI,KAAKO,YAAc,MAC7E,gBAAMC,SAAS,eAAeF,QAASF,EAAAA,EAAAA,SACvC,gBAAMI,SAAS,UAAUF,QAAQ,aACjC,gBAAME,SAAS,WAAWF,QAAU,GAAEd,OAASY,EAAAA,EAAAA,WAC/C,gBAAMI,SAAS,SAASF,QAASF,EAAAA,EAAAA,QAAiBb,EAASkB,WAC1DL,EAAAA,EAAAA,WAAmB,gBAAMI,SAAS,oBAAoBF,QAASF,EAAAA,EAAAA,YAChE,gBAAMC,KAAK,eAAeC,QAAQ,yBAClC,gBAAMD,KAAK,gBAAgBC,QAAU,GAAEd,OAASY,EAAAA,EAAAA,WAChD,gBAAMC,KAAK,cAAcC,QAASF,EAAAA,EAAAA,QAAiBb,EAASkB,WAC3DL,EAAAA,EAAAA,UACC,gBACEC,KAAK,eACLC,QAAU,IAAGF,EAAAA,EAAAA,QAAAA,MAAqB,wBAAwB,SAIhE,QAAC,IAAD,MACE,kBACEM,UAAU,sBACVC,IAAG,CAAGC,EAAAA,GAAYC,EAAAA,GAAf,SAEH,eAAKF,IAAG,CAAGG,EAAAA,GAAOC,EAAAA,GAAV,SACN,eAAKJ,IAAKK,EAAAA,KACR,QAAC,IAAD,CAASC,QAAQ,OAGrB,QAAC,KAAD,CACEN,IAAG,CAAGG,EAAAA,GAAOI,EAAAA,GAAV,OACHC,gBAAiBvB,MAAAA,GAAF,UAAEA,EAASI,YAAX,iBAAE,EAAeoB,aAAjB,iBAAE,EAAsBC,uBAAxB,iBAAE,EAAuCC,aAAzC,aAAE,EAA8CC,IAC/Db,UAAU,2BAEV,QAAC,KAAD,CAAmBC,IAAKK,EAAAA,GAAON,UAAU,wBACvC,QAAC,KAAD,CAAWA,UAAU,cAAclB,IACnC,QAAC,KAAD,CAAiBkB,UAAU,oBACxBd,MAAAA,GAAAA,EAASI,KAAKO,YACbX,EAAQI,KAAKO,aAEb,2CACmBb,EAAa,GAAM,GAAEA,UACtB,IAAfA,GAAoB,SACL,IAAfA,GAAoB,iBAOjC,gBAAMO,GAAG,YAAYU,IAAG,CAAGa,EAAAA,GAAUV,EAAAA,GAAb,SACtB,eAAKH,IAAKK,EAAAA,KACR,eAAKL,IAAG,CAAGc,EAAAA,GAAH,QACLhC,EAAMiC,KAAI,QAAC,KAAE1B,GAAH,SACT,QAAC,KAAD,CAAU2B,IAAK3B,EAAK4B,OAAOC,KAAMC,KAAM9B,WAK/C,QAAC,IAAD","sources":["webpack://scottg489.github.io/./src/templates/tags.tsx"],"sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\nimport { FluidObject } from 'gatsby-image';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteNavMain,\n  SiteArchiveHeader,\n  ResponsiveHeaderBackground,\n  SiteHeaderBackground,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport { Helmet } from 'react-helmet';\nimport config from '../website-config';\n\ninterface TagTemplateProps {\n  location: Location;\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              fluid: FluidObject;\n            };\n          };\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst Tags = ({ pageContext, data, location }: TagTemplateProps) => {\n  const tag = pageContext.tag ? pageContext.tag : '';\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagData = data.allTagYaml.edges.find(\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {tag} - {config.title}\n        </title>\n        <meta name=\"description\" content={tagData?.node ? tagData.node.description : ''} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header\n          className=\"site-archive-header\"\n          css={[SiteHeader, SiteArchiveHeader]}\n        >\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} />\n            </div>\n          </div>\n          <ResponsiveHeaderBackground\n            css={[outer, SiteHeaderBackground]}\n            backgroundImage={tagData?.node?.image?.childImageSharp?.fluid?.src}\n            className=\"site-header-background\"\n          >\n            <SiteHeaderContent css={inner} className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">{tag}</SiteTitle>\n              <SiteDescription className=\"site-description\">\n                {tagData?.node.description ? (\n                  tagData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\n                    {totalCount === 1 && '1 post'}\n                    {totalCount === 0 && 'No posts'}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </ResponsiveHeaderBackground>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed]}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              fluid(maxWidth: 3720) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } }, fileAbsolutePath: {regex: \"/content/posts/\"} }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            excerpt\n            tags\n            date\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1240) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["pageContext","data","location","tag","edges","totalCount","allMarkdownRemark","tagData","allTagYaml","find","n","node","id","toLowerCase","lang","config","name","content","description","property","pathname","className","css","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","isHome","SiteHeaderBackground","backgroundImage","image","childImageSharp","fluid","src","SiteMain","PostFeed","map","key","fields","slug","post"],"sourceRoot":""}